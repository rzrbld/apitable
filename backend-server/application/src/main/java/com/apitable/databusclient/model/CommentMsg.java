/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * CommentMsg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommentMsg {
  public static final String SERIALIZED_NAME_COMMENT_TYPE = "commentType";
  @SerializedName(SERIALIZED_NAME_COMMENT_TYPE)
  private String commentType;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_EMOJIS = "emojis";
  @SerializedName(SERIALIZED_NAME_EMOJIS)
  private Map<String, List<String>> emojis;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_REPLY = "reply";
  @SerializedName(SERIALIZED_NAME_REPLY)
  private String reply;

  public CommentMsg() {
  }

  public CommentMsg commentType(String commentType) {
    
    this.commentType = commentType;
    return this;
  }

   /**
   * Get commentType
   * @return commentType
  **/
  @javax.annotation.Nonnull
  public String getCommentType() {
    return commentType;
  }


  public void setCommentType(String commentType) {
    this.commentType = commentType;
  }


  public CommentMsg content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public CommentMsg emojis(Map<String, List<String>> emojis) {
    
    this.emojis = emojis;
    return this;
  }

  public CommentMsg putEmojisItem(String key, List<String> emojisItem) {
    if (this.emojis == null) {
      this.emojis = new HashMap<>();
    }
    this.emojis.put(key, emojisItem);
    return this;
  }

   /**
   * Get emojis
   * @return emojis
  **/
  @javax.annotation.Nullable
  public Map<String, List<String>> getEmojis() {
    return emojis;
  }


  public void setEmojis(Map<String, List<String>> emojis) {
    this.emojis = emojis;
  }


  public CommentMsg html(String html) {
    
    this.html = html;
    return this;
  }

   /**
   * Get html
   * @return html
  **/
  @javax.annotation.Nonnull
  public String getHtml() {
    return html;
  }


  public void setHtml(String html) {
    this.html = html;
  }


  public CommentMsg reply(String reply) {
    
    this.reply = reply;
    return this;
  }

   /**
   * Get reply
   * @return reply
  **/
  @javax.annotation.Nullable
  public String getReply() {
    return reply;
  }


  public void setReply(String reply) {
    this.reply = reply;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentMsg commentMsg = (CommentMsg) o;
    return Objects.equals(this.commentType, commentMsg.commentType) &&
        Objects.equals(this.content, commentMsg.content) &&
        Objects.equals(this.emojis, commentMsg.emojis) &&
        Objects.equals(this.html, commentMsg.html) &&
        Objects.equals(this.reply, commentMsg.reply);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentType, content, emojis, html, reply);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentMsg {\n");
    sb.append("    commentType: ").append(toIndentedString(commentType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    emojis: ").append(toIndentedString(emojis)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commentType");
    openapiFields.add("content");
    openapiFields.add("emojis");
    openapiFields.add("html");
    openapiFields.add("reply");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commentType");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("html");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CommentMsg
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommentMsg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommentMsg is not found in the empty JSON string", CommentMsg.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommentMsg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommentMsg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommentMsg.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("commentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentType").toString()));
      }
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("reply") != null && !jsonObj.get("reply").isJsonNull()) && !jsonObj.get("reply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommentMsg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommentMsg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommentMsg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommentMsg.class));

       return (TypeAdapter<T>) new TypeAdapter<CommentMsg>() {
           @Override
           public void write(JsonWriter out, CommentMsg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommentMsg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommentMsg given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommentMsg
  * @throws IOException if the JSON string is invalid with respect to CommentMsg
  */
  public static CommentMsg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommentMsg.class);
  }

 /**
  * Convert an instance of CommentMsg to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

