/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.api;

import com.apitable.databusclient.ApiCallback;
import com.apitable.databusclient.ApiClient;
import com.apitable.databusclient.ApiException;
import com.apitable.databusclient.ApiResponse;
import com.apitable.databusclient.Configuration;
import com.apitable.databusclient.Pair;
import com.apitable.databusclient.ProgressRequestBody;
import com.apitable.databusclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnterpriseFusionApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnterpriseFusionApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnterpriseFusionApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchDeleteView
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch_delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeleteViewCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchDeleteViewValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling batchDeleteView(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling batchDeleteView(Async)");
        }

        return batchDeleteViewCall(dstId, authorization, _callback);

    }

    /**
     * batch_delete_view
     * batch_delete_view  Batch delete views in a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch_delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public void batchDeleteView(String dstId, String authorization) throws ApiException {
        batchDeleteViewWithHttpInfo(dstId, authorization);
    }

    /**
     * batch_delete_view
     * batch_delete_view  Batch delete views in a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch_delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> batchDeleteViewWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = batchDeleteViewValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * batch_delete_view (asynchronously)
     * batch_delete_view  Batch delete views in a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> batch_delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeleteViewAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchDeleteViewValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyView
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyViewCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views/{view_id}/duplicate"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()))
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyViewValidateBeforeCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling copyView(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling copyView(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling copyView(Async)");
        }

        return copyViewCall(dstId, viewId, authorization, _callback);

    }

    /**
     * copy_view
     * copy_view  copy a view at a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public void copyView(String dstId, String viewId, String authorization) throws ApiException {
        copyViewWithHttpInfo(dstId, viewId, authorization);
    }

    /**
     * copy_view
     * copy_view  copy a view at a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> copyViewWithHttpInfo(String dstId, String viewId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = copyViewValidateBeforeCall(dstId, viewId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * copy_view (asynchronously)
     * copy_view  copy a view at a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> copy_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyViewAsync(String dstId, String viewId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyViewValidateBeforeCall(dstId, viewId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChatCompletion
     * @param aiId ai_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_chat_completion successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChatCompletionCall(String aiId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/ai/{ai_id}/chat/completions"
            .replace("{" + "ai_id" + "}", localVarApiClient.escapeString(aiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChatCompletionValidateBeforeCall(String aiId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aiId' is set
        if (aiId == null) {
            throw new ApiException("Missing the required parameter 'aiId' when calling createChatCompletion(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createChatCompletion(Async)");
        }

        return createChatCompletionCall(aiId, authorization, _callback);

    }

    /**
     * create_chat_completion
     * create_chat_completion  Creates a model response for the given chat conversation
     * @param aiId ai_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_chat_completion successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createChatCompletion(String aiId, String authorization) throws ApiException {
        createChatCompletionWithHttpInfo(aiId, authorization);
    }

    /**
     * create_chat_completion
     * create_chat_completion  Creates a model response for the given chat conversation
     * @param aiId ai_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_chat_completion successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createChatCompletionWithHttpInfo(String aiId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createChatCompletionValidateBeforeCall(aiId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_chat_completion (asynchronously)
     * create_chat_completion  Creates a model response for the given chat conversation
     * @param aiId ai_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_chat_completion successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChatCompletionAsync(String aiId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChatCompletionValidateBeforeCall(aiId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmbedLink
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbedLinkCall(String spaceId, String nodeId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/nodes/{node_id}/embedlinks"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbedLinkValidateBeforeCall(String spaceId, String nodeId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createEmbedLink(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling createEmbedLink(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createEmbedLink(Async)");
        }

        return createEmbedLinkCall(spaceId, nodeId, authorization, _callback);

    }

    /**
     * create_embed_link
     * create_embed_link  Creates an \&quot;embed link\&quot; for the specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createEmbedLink(String spaceId, String nodeId, String authorization) throws ApiException {
        createEmbedLinkWithHttpInfo(spaceId, nodeId, authorization);
    }

    /**
     * create_embed_link
     * create_embed_link  Creates an \&quot;embed link\&quot; for the specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createEmbedLinkWithHttpInfo(String spaceId, String nodeId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createEmbedLinkValidateBeforeCall(spaceId, nodeId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_embed_link (asynchronously)
     * create_embed_link  Creates an \&quot;embed link\&quot; for the specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbedLinkAsync(String spaceId, String nodeId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbedLinkValidateBeforeCall(spaceId, nodeId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMember
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/members"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMemberValidateBeforeCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createMember(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createMember(Async)");
        }

        return createMemberCall(spaceId, authorization, _callback);

    }

    /**
     * create_member
     * create_member  Create a member for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createMember(String spaceId, String authorization) throws ApiException {
        createMemberWithHttpInfo(spaceId, authorization);
    }

    /**
     * create_member
     * create_member  Create a member for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createMemberWithHttpInfo(String spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createMemberValidateBeforeCall(spaceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_member (asynchronously)
     * create_member  Create a member for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberAsync(String spaceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMemberValidateBeforeCall(spaceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/roles"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createRole(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createRole(Async)");
        }

        return createRoleCall(spaceId, authorization, _callback);

    }

    /**
     * create_role
     * create_role  Create a role for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createRole(String spaceId, String authorization) throws ApiException {
        createRoleWithHttpInfo(spaceId, authorization);
    }

    /**
     * create_role
     * create_role  Create a role for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createRoleWithHttpInfo(String spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(spaceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_role (asynchronously)
     * create_role  Create a role for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(String spaceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(spaceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTeam
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/teams"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamValidateBeforeCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createTeam(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createTeam(Async)");
        }

        return createTeamCall(spaceId, authorization, _callback);

    }

    /**
     * create_team
     * create_team  Create a team for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createTeam(String spaceId, String authorization) throws ApiException {
        createTeamWithHttpInfo(spaceId, authorization);
    }

    /**
     * create_team
     * create_team  Create a team for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createTeamWithHttpInfo(String spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createTeamValidateBeforeCall(spaceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_team (asynchronously)
     * create_team  Create a team for a specified space.
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamAsync(String spaceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamValidateBeforeCall(spaceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createView
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createViewCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createViewValidateBeforeCall(String dstId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling createView(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createView(Async)");
        }

        return createViewCall(dstId, authorization, _callback);

    }

    /**
     * create_view
     * create_view  Add a view to a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createView(String dstId, String authorization) throws ApiException {
        createViewWithHttpInfo(dstId, authorization);
    }

    /**
     * create_view
     * create_view  Add a view to a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createViewWithHttpInfo(String dstId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createViewValidateBeforeCall(dstId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_view (asynchronously)
     * create_view  Add a view to a specified datasheet
     * @param dstId dst_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createViewAsync(String dstId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createViewValidateBeforeCall(dstId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWidget
     * @param dashboardId dashboard_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWidgetCall(String dashboardId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/dashboards/{dashboard_id}/widgets"
            .replace("{" + "dashboard_id" + "}", localVarApiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWidgetValidateBeforeCall(String dashboardId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling createWidget(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createWidget(Async)");
        }

        return createWidgetCall(dashboardId, authorization, _callback);

    }

    /**
     * create_widget
     * create_widget  Add a widget to a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public void createWidget(String dashboardId, String authorization) throws ApiException {
        createWidgetWithHttpInfo(dashboardId, authorization);
    }

    /**
     * create_widget
     * create_widget  Add a widget to a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createWidgetWithHttpInfo(String dashboardId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createWidgetValidateBeforeCall(dashboardId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create_widget (asynchronously)
     * create_widget  Add a widget to a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWidgetAsync(String dashboardId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWidgetValidateBeforeCall(dashboardId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEmbedLink
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param linkId link_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmbedLinkCall(String spaceId, String nodeId, String linkId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/nodes/{node_id}/embedlinks/{link_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()))
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmbedLinkValidateBeforeCall(String spaceId, String nodeId, String linkId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteEmbedLink(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteEmbedLink(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling deleteEmbedLink(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEmbedLink(Async)");
        }

        return deleteEmbedLinkCall(spaceId, nodeId, linkId, authorization, _callback);

    }

    /**
     * delete_embed_link
     * delete_embed_link  Removes the specified Advanced Embed link. After deleted, the link cannot be accessed.
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param linkId link_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEmbedLink(String spaceId, String nodeId, String linkId, String authorization) throws ApiException {
        deleteEmbedLinkWithHttpInfo(spaceId, nodeId, linkId, authorization);
    }

    /**
     * delete_embed_link
     * delete_embed_link  Removes the specified Advanced Embed link. After deleted, the link cannot be accessed.
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param linkId link_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEmbedLinkWithHttpInfo(String spaceId, String nodeId, String linkId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteEmbedLinkValidateBeforeCall(spaceId, nodeId, linkId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_embed_link (asynchronously)
     * delete_embed_link  Removes the specified Advanced Embed link. After deleted, the link cannot be accessed.
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param linkId link_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_embed_link successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEmbedLinkAsync(String spaceId, String nodeId, String linkId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmbedLinkValidateBeforeCall(spaceId, nodeId, linkId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMember
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/members/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMemberValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteMember(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling deleteMember(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteMember(Async)");
        }

        return deleteMemberCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * delete_member
     * delete_member  Delete a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMember(String spaceId, String unitId, String authorization) throws ApiException {
        deleteMemberWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * delete_member
     * delete_member  Delete a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMemberWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_member (asynchronously)
     * delete_member  Delete a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/roles/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteRole(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling deleteRole(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRole(Async)");
        }

        return deleteRoleCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * delete_role
     * delete_role  Delete a role for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String spaceId, String unitId, String authorization) throws ApiException {
        deleteRoleWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * delete_role
     * delete_role  Delete a role for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_role (asynchronously)
     * delete_role  Delete a role for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeam
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/teams/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteTeam(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling deleteTeam(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteTeam(Async)");
        }

        return deleteTeamCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * delete_team
     * delete_team  Delete a team for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTeam(String spaceId, String unitId, String authorization) throws ApiException {
        deleteTeamWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * delete_team
     * delete_team  Delete a team for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTeamWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_team (asynchronously)
     * delete_team  Delete a team for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteView
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteViewCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views/{view_id}"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()))
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteViewValidateBeforeCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling deleteView(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deleteView(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteView(Async)");
        }

        return deleteViewCall(dstId, viewId, authorization, _callback);

    }

    /**
     * delete_view
     * delete_view  Delete a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteView(String dstId, String viewId, String authorization) throws ApiException {
        deleteViewWithHttpInfo(dstId, viewId, authorization);
    }

    /**
     * delete_view
     * delete_view  Delete a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteViewWithHttpInfo(String dstId, String viewId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteViewValidateBeforeCall(dstId, viewId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_view (asynchronously)
     * delete_view  Delete a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteViewAsync(String dstId, String viewId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteViewValidateBeforeCall(dstId, viewId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWidget
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWidgetCall(String dashboardId, String widgetId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/dashboards/{dashboard_id}/widgets/{widget_id}"
            .replace("{" + "dashboard_id" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "widget_id" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWidgetValidateBeforeCall(String dashboardId, String widgetId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling deleteWidget(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling deleteWidget(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteWidget(Async)");
        }

        return deleteWidgetCall(dashboardId, widgetId, authorization, _callback);

    }

    /**
     * delete_widget
     * delete_widget  delete widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWidget(String dashboardId, String widgetId, String authorization) throws ApiException {
        deleteWidgetWithHttpInfo(dashboardId, widgetId, authorization);
    }

    /**
     * delete_widget
     * delete_widget  delete widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWidgetWithHttpInfo(String dashboardId, String widgetId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteWidgetValidateBeforeCall(dashboardId, widgetId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete_widget (asynchronously)
     * delete_widget  delete widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> delete_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWidgetAsync(String dashboardId, String widgetId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWidgetValidateBeforeCall(dashboardId, widgetId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedLinkList
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_embed_link_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedLinkListCall(String spaceId, String nodeId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/nodes/{node_id}/embedlinks"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedLinkListValidateBeforeCall(String spaceId, String nodeId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getEmbedLinkList(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getEmbedLinkList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEmbedLinkList(Async)");
        }

        return getEmbedLinkListCall(spaceId, nodeId, authorization, _callback);

    }

    /**
     * get_embed_link_list
     * get_embed_link_list  Get all embedded links for a specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_embed_link_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public void getEmbedLinkList(String spaceId, String nodeId, String authorization) throws ApiException {
        getEmbedLinkListWithHttpInfo(spaceId, nodeId, authorization);
    }

    /**
     * get_embed_link_list
     * get_embed_link_list  Get all embedded links for a specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_embed_link_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEmbedLinkListWithHttpInfo(String spaceId, String nodeId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getEmbedLinkListValidateBeforeCall(spaceId, nodeId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * get_embed_link_list (asynchronously)
     * get_embed_link_list  Get all embedded links for a specified node
     * @param spaceId space_id (required)
     * @param nodeId node_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get_embed_link_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedLinkListAsync(String spaceId, String nodeId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedLinkListValidateBeforeCall(spaceId, nodeId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberDetail
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> member_detail successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberDetailCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/members/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberDetailValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling memberDetail(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling memberDetail(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling memberDetail(Async)");
        }

        return memberDetailCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * member_detail
     * member_detail  Get member details information
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> member_detail successfully </td><td>  -  </td></tr>
     </table>
     */
    public void memberDetail(String spaceId, String unitId, String authorization) throws ApiException {
        memberDetailWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * member_detail
     * member_detail  Get member details information
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> member_detail successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> memberDetailWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = memberDetailValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * member_detail (asynchronously)
     * member_detail  Get member details information
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> member_detail successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberDetailAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberDetailValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleList
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleListCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/roles"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleListValidateBeforeCall(String spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling roleList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling roleList(Async)");
        }

        return roleListCall(spaceId, authorization, _callback);

    }

    /**
     * role_list
     * role_list  Get roles for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public void roleList(String spaceId, String authorization) throws ApiException {
        roleListWithHttpInfo(spaceId, authorization);
    }

    /**
     * role_list
     * role_list  Get roles for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> roleListWithHttpInfo(String spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = roleListValidateBeforeCall(spaceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * role_list (asynchronously)
     * role_list  Get roles for a specified space
     * @param spaceId space_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleListAsync(String spaceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleListValidateBeforeCall(spaceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleUnitList
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_unit_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleUnitListCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/roles/{unit_id}/units"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleUnitListValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling roleUnitList(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling roleUnitList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling roleUnitList(Async)");
        }

        return roleUnitListCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * role_unit_list
     * role_unit_list  Get the organizational units under the specified role unitId, the returned data includes teams and members.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_unit_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public void roleUnitList(String spaceId, String unitId, String authorization) throws ApiException {
        roleUnitListWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * role_unit_list
     * role_unit_list  Get the organizational units under the specified role unitId, the returned data includes teams and members.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_unit_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> roleUnitListWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = roleUnitListValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * role_unit_list (asynchronously)
     * role_unit_list  Get the organizational units under the specified role unitId, the returned data includes teams and members.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> role_unit_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleUnitListAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleUnitListValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subTeamList
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> sub_team_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subTeamListCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/teams/{unit_id}/children"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subTeamListValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling subTeamList(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling subTeamList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling subTeamList(Async)");
        }

        return subTeamListCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * sub_team_list
     * sub_team_list  Get the list of sub teams of a team by UnitId.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> sub_team_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public void subTeamList(String spaceId, String unitId, String authorization) throws ApiException {
        subTeamListWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * sub_team_list
     * sub_team_list  Get the list of sub teams of a team by UnitId.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> sub_team_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subTeamListWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = subTeamListValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * sub_team_list (asynchronously)
     * sub_team_list  Get the list of sub teams of a team by UnitId.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> sub_team_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subTeamListAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subTeamListValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamMemberList
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> team_member_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamMemberListCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/teams/{unit_id}/members"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamMemberListValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling teamMemberList(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling teamMemberList(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling teamMemberList(Async)");
        }

        return teamMemberListCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * team_member_list
     * team_member_list  List members under team.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> team_member_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public void teamMemberList(String spaceId, String unitId, String authorization) throws ApiException {
        teamMemberListWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * team_member_list
     * team_member_list  List members under team.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> team_member_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamMemberListWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = teamMemberListValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * team_member_list (asynchronously)
     * team_member_list  List members under team.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> team_member_list successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamMemberListAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamMemberListValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMember
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/members/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateMember(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling updateMember(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateMember(Async)");
        }

        return updateMemberCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * update_member
     * update_member  Update a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public void updateMember(String spaceId, String unitId, String authorization) throws ApiException {
        updateMemberWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * update_member
     * update_member  Update a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMemberWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update_member (asynchronously)
     * update_member  Update a member for a specified space.
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_member successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/roles/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateRole(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling updateRole(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRole(Async)");
        }

        return updateRoleCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * update_role
     * update_role  Update roles for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public void updateRole(String spaceId, String unitId, String authorization) throws ApiException {
        updateRoleWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * update_role
     * update_role  Update roles for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRoleWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update_role (asynchronously)
     * update_role  Update roles for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_role successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeam
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/spaces/{space_id}/teams/{unit_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "unit_id" + "}", localVarApiClient.escapeString(unitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamValidateBeforeCall(String spaceId, String unitId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateTeam(Async)");
        }

        // verify the required parameter 'unitId' is set
        if (unitId == null) {
            throw new ApiException("Missing the required parameter 'unitId' when calling updateTeam(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateTeam(Async)");
        }

        return updateTeamCall(spaceId, unitId, authorization, _callback);

    }

    /**
     * update_team
     * update_team  Update a for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public void updateTeam(String spaceId, String unitId, String authorization) throws ApiException {
        updateTeamWithHttpInfo(spaceId, unitId, authorization);
    }

    /**
     * update_team
     * update_team  Update a for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTeamWithHttpInfo(String spaceId, String unitId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(spaceId, unitId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update_team (asynchronously)
     * update_team  Update a for a specified space
     * @param spaceId space_id (required)
     * @param unitId unit_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_team successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamAsync(String spaceId, String unitId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(spaceId, unitId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateView
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateViewCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/datasheets/{dst_id}/views/{view_id}"
            .replace("{" + "dst_id" + "}", localVarApiClient.escapeString(dstId.toString()))
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateViewValidateBeforeCall(String dstId, String viewId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dstId' is set
        if (dstId == null) {
            throw new ApiException("Missing the required parameter 'dstId' when calling updateView(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateView(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateView(Async)");
        }

        return updateViewCall(dstId, viewId, authorization, _callback);

    }

    /**
     * update_view
     * update_view  update a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public void updateView(String dstId, String viewId, String authorization) throws ApiException {
        updateViewWithHttpInfo(dstId, viewId, authorization);
    }

    /**
     * update_view
     * update_view  update a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateViewWithHttpInfo(String dstId, String viewId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateViewValidateBeforeCall(dstId, viewId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update_view (asynchronously)
     * update_view  update a view in a specified datasheet
     * @param dstId dst_id (required)
     * @param viewId view_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_view successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateViewAsync(String dstId, String viewId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateViewValidateBeforeCall(dstId, viewId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWidget
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWidgetCall(String dashboardId, String widgetId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fusion/v3/dashboards/{dashboard_id}/widgets/{widget_id}"
            .replace("{" + "dashboard_id" + "}", localVarApiClient.escapeString(dashboardId.toString()))
            .replace("{" + "widget_id" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWidgetValidateBeforeCall(String dashboardId, String widgetId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling updateWidget(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling updateWidget(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateWidget(Async)");
        }

        return updateWidgetCall(dashboardId, widgetId, authorization, _callback);

    }

    /**
     * update_widget
     * update_widget  modify widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public void updateWidget(String dashboardId, String widgetId, String authorization) throws ApiException {
        updateWidgetWithHttpInfo(dashboardId, widgetId, authorization);
    }

    /**
     * update_widget
     * update_widget  modify widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWidgetWithHttpInfo(String dashboardId, String widgetId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateWidgetValidateBeforeCall(dashboardId, widgetId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update_widget (asynchronously)
     * update_widget  modify widget in a specified dashboard
     * @param dashboardId dashboard_id (required)
     * @param widgetId widget_id (required)
     * @param authorization Current csrf token of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update_widget successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWidgetAsync(String dashboardId, String widgetId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWidgetValidateBeforeCall(dashboardId, widgetId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
