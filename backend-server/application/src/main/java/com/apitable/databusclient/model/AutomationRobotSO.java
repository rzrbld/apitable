/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 0.99.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.apitable.databusclient.model.AutomationActionIntroductionPO;
import com.apitable.databusclient.model.AutomationRobotPO;
import com.apitable.databusclient.model.AutomationTriggerIntroductionPO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * AutomationRobotSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T18:25:43.276+08:00[Asia/Shanghai]")
public class AutomationRobotSO {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<AutomationActionIntroductionPO> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROBOTS = "robots";
  @SerializedName(SERIALIZED_NAME_ROBOTS)
  private List<AutomationRobotPO> robots = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<AutomationTriggerIntroductionPO> triggers = new ArrayList<>();

  public AutomationRobotSO() {
  }

  public AutomationRobotSO actions(List<AutomationActionIntroductionPO> actions) {
    
    this.actions = actions;
    return this;
  }

  public AutomationRobotSO addActionsItem(AutomationActionIntroductionPO actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nonnull
  public List<AutomationActionIntroductionPO> getActions() {
    return actions;
  }


  public void setActions(List<AutomationActionIntroductionPO> actions) {
    this.actions = actions;
  }


  public AutomationRobotSO robots(List<AutomationRobotPO> robots) {
    
    this.robots = robots;
    return this;
  }

  public AutomationRobotSO addRobotsItem(AutomationRobotPO robotsItem) {
    if (this.robots == null) {
      this.robots = new ArrayList<>();
    }
    this.robots.add(robotsItem);
    return this;
  }

   /**
   * Get robots
   * @return robots
  **/
  @javax.annotation.Nonnull
  public List<AutomationRobotPO> getRobots() {
    return robots;
  }


  public void setRobots(List<AutomationRobotPO> robots) {
    this.robots = robots;
  }


  public AutomationRobotSO triggers(List<AutomationTriggerIntroductionPO> triggers) {
    
    this.triggers = triggers;
    return this;
  }

  public AutomationRobotSO addTriggersItem(AutomationTriggerIntroductionPO triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

   /**
   * Get triggers
   * @return triggers
  **/
  @javax.annotation.Nonnull
  public List<AutomationTriggerIntroductionPO> getTriggers() {
    return triggers;
  }


  public void setTriggers(List<AutomationTriggerIntroductionPO> triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationRobotSO automationRobotSO = (AutomationRobotSO) o;
    return Objects.equals(this.actions, automationRobotSO.actions) &&
        Objects.equals(this.robots, automationRobotSO.robots) &&
        Objects.equals(this.triggers, automationRobotSO.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, robots, triggers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationRobotSO {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    robots: ").append(toIndentedString(robots)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("robots");
    openapiFields.add("triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actions");
    openapiRequiredFields.add("robots");
    openapiRequiredFields.add("triggers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutomationRobotSO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AutomationRobotSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationRobotSO is not found in the empty JSON string", AutomationRobotSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutomationRobotSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationRobotSO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutomationRobotSO.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }

      JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
      // validate the required field `actions` (array)
      for (int i = 0; i < jsonArrayactions.size(); i++) {
        AutomationActionIntroductionPO.validateJsonObject(jsonArrayactions.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("robots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `robots` to be an array in the JSON string but got `%s`", jsonObj.get("robots").toString()));
      }

      JsonArray jsonArrayrobots = jsonObj.getAsJsonArray("robots");
      // validate the required field `robots` (array)
      for (int i = 0; i < jsonArrayrobots.size(); i++) {
        AutomationRobotPO.validateJsonObject(jsonArrayrobots.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("triggers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
      }

      JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
      // validate the required field `triggers` (array)
      for (int i = 0; i < jsonArraytriggers.size(); i++) {
        AutomationTriggerIntroductionPO.validateJsonObject(jsonArraytriggers.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationRobotSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationRobotSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationRobotSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationRobotSO.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationRobotSO>() {
           @Override
           public void write(JsonWriter out, AutomationRobotSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationRobotSO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutomationRobotSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutomationRobotSO
  * @throws IOException if the JSON string is invalid with respect to AutomationRobotSO
  */
  public static AutomationRobotSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationRobotSO.class);
  }

 /**
  * Convert an instance of AutomationRobotSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

