/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.CollectType;
import com.apitable.databusclient.model.DateFormat;
import com.apitable.databusclient.model.LinkedFields;
import com.apitable.databusclient.model.LookUpFilterPO;
import com.apitable.databusclient.model.RollUpFuncType;
import com.apitable.databusclient.model.SingleSelectProperty;
import com.apitable.databusclient.model.SymbolAlign;
import com.apitable.databusclient.model.TimeFormat;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * FieldPropertySO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FieldPropertySO {
  public static final String SERIALIZED_NAME_AUTO_FILL = "autoFill";
  @SerializedName(SERIALIZED_NAME_AUTO_FILL)
  private Boolean autoFill;

  public static final String SERIALIZED_NAME_BROTHER_FIELD_ID = "brotherFieldId";
  @SerializedName(SERIALIZED_NAME_BROTHER_FIELD_ID)
  private String brotherFieldId;

  public static final String SERIALIZED_NAME_COLLECT_TYPE = "collectType";
  @SerializedName(SERIALIZED_NAME_COLLECT_TYPE)
  private CollectType collectType;

  public static final String SERIALIZED_NAME_COMMA_STYLE = "commaStyle";
  @SerializedName(SERIALIZED_NAME_COMMA_STYLE)
  private String commaStyle;

  public static final String SERIALIZED_NAME_DATASHEET_ID = "datasheetId";
  @SerializedName(SERIALIZED_NAME_DATASHEET_ID)
  private String datasheetId;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private DateFormat dateFormat;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_FIELD_ID_COLLECTION = "fieldIdCollection";
  @SerializedName(SERIALIZED_NAME_FIELD_ID_COLLECTION)
  private List<String> fieldIdCollection;

  public static final String SERIALIZED_NAME_FILTER_INFO = "filterInfo";
  @SerializedName(SERIALIZED_NAME_FILTER_INFO)
  private LookUpFilterPO filterInfo;

  public static final String SERIALIZED_NAME_FOREIGN_DATASHEET_ID = "foreignDatasheetId";
  @SerializedName(SERIALIZED_NAME_FOREIGN_DATASHEET_ID)
  private String foreignDatasheetId;

  public static final String SERIALIZED_NAME_FORMATTING = "formatting";
  @SerializedName(SERIALIZED_NAME_FORMATTING)
  private Object formatting = null;

  public static final String SERIALIZED_NAME_FULL_LINKED_FIELDS = "fullLinkedFields";
  @SerializedName(SERIALIZED_NAME_FULL_LINKED_FIELDS)
  private List<LinkedFields> fullLinkedFields;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_INCLUDE_TIME = "includeTime";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TIME)
  private Boolean includeTime;

  public static final String SERIALIZED_NAME_INCLUDE_TIME_ZONE = "includeTimeZone";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TIME_ZONE)
  private Boolean includeTimeZone;

  public static final String SERIALIZED_NAME_IS_MULTI = "isMulti";
  @SerializedName(SERIALIZED_NAME_IS_MULTI)
  private Boolean isMulti;

  public static final String SERIALIZED_NAME_IS_RECOG_URL_FLAG = "isRecogUrlFlag";
  @SerializedName(SERIALIZED_NAME_IS_RECOG_URL_FLAG)
  private Boolean isRecogUrlFlag;

  public static final String SERIALIZED_NAME_LIMIT_SINGLE_RECORD = "limitSingleRecord";
  @SerializedName(SERIALIZED_NAME_LIMIT_SINGLE_RECORD)
  private Boolean limitSingleRecord;

  public static final String SERIALIZED_NAME_LIMIT_TO_VIEW = "limitToView";
  @SerializedName(SERIALIZED_NAME_LIMIT_TO_VIEW)
  private String limitToView;

  public static final String SERIALIZED_NAME_LINKED_DATASHEET_ID = "linkedDatasheetId";
  @SerializedName(SERIALIZED_NAME_LINKED_DATASHEET_ID)
  private String linkedDatasheetId;

  public static final String SERIALIZED_NAME_LINKED_FIELDS = "linkedFields";
  @SerializedName(SERIALIZED_NAME_LINKED_FIELDS)
  private List<LinkedFields> linkedFields;

  public static final String SERIALIZED_NAME_LINKED_VIEW_ID = "linkedViewId";
  @SerializedName(SERIALIZED_NAME_LINKED_VIEW_ID)
  private String linkedViewId;

  public static final String SERIALIZED_NAME_LOOK_UP_LIMIT = "lookUpLimit";
  @SerializedName(SERIALIZED_NAME_LOOK_UP_LIMIT)
  private Object lookUpLimit = null;

  public static final String SERIALIZED_NAME_LOOK_UP_TARGET_FIELD_ID = "lookUpTargetFieldId";
  @SerializedName(SERIALIZED_NAME_LOOK_UP_TARGET_FIELD_ID)
  private String lookUpTargetFieldId;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_NEXT_ID = "nextId";
  @SerializedName(SERIALIZED_NAME_NEXT_ID)
  private Integer nextId;

  public static final String SERIALIZED_NAME_OPEN_FILTER = "openFilter";
  @SerializedName(SERIALIZED_NAME_OPEN_FILTER)
  private Boolean openFilter;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<SingleSelectProperty> options;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_RELATED_LINK_FIELD_ID = "relatedLinkFieldId";
  @SerializedName(SERIALIZED_NAME_RELATED_LINK_FIELD_ID)
  private String relatedLinkFieldId;

  public static final String SERIALIZED_NAME_ROLL_UP_TYPE = "rollUpType";
  @SerializedName(SERIALIZED_NAME_ROLL_UP_TYPE)
  private RollUpFuncType rollUpType;

  public static final String SERIALIZED_NAME_SHOULD_SEND_MSG = "shouldSendMsg";
  @SerializedName(SERIALIZED_NAME_SHOULD_SEND_MSG)
  private Boolean shouldSendMsg;

  public static final String SERIALIZED_NAME_SHOW_ALL = "showAll";
  @SerializedName(SERIALIZED_NAME_SHOW_ALL)
  private Boolean showAll;

  public static final String SERIALIZED_NAME_SORT_INFO = "sortInfo";
  @SerializedName(SERIALIZED_NAME_SORT_INFO)
  private Object sortInfo = null;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private Boolean subscription;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_SYMBOL_ALIGN = "symbolAlign";
  @SerializedName(SERIALIZED_NAME_SYMBOL_ALIGN)
  private SymbolAlign symbolAlign;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private TimeFormat timeFormat;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_UNIT_IDS = "unitIds";
  @SerializedName(SERIALIZED_NAME_UNIT_IDS)
  private List<String> unitIds;

  public static final String SERIALIZED_NAME_UUIDS = "uuids";
  @SerializedName(SERIALIZED_NAME_UUIDS)
  private List<String> uuids;

  public static final String SERIALIZED_NAME_VIEW_IDX = "viewIdx";
  @SerializedName(SERIALIZED_NAME_VIEW_IDX)
  private Integer viewIdx;

  public FieldPropertySO() {
  }

  public FieldPropertySO autoFill(Boolean autoFill) {
    
    this.autoFill = autoFill;
    return this;
  }

   /**
   * Get autoFill
   * @return autoFill
  **/
  @javax.annotation.Nullable
  public Boolean getAutoFill() {
    return autoFill;
  }


  public void setAutoFill(Boolean autoFill) {
    this.autoFill = autoFill;
  }


  public FieldPropertySO brotherFieldId(String brotherFieldId) {
    
    this.brotherFieldId = brotherFieldId;
    return this;
  }

   /**
   * Get brotherFieldId
   * @return brotherFieldId
  **/
  @javax.annotation.Nullable
  public String getBrotherFieldId() {
    return brotherFieldId;
  }


  public void setBrotherFieldId(String brotherFieldId) {
    this.brotherFieldId = brotherFieldId;
  }


  public FieldPropertySO collectType(CollectType collectType) {
    
    this.collectType = collectType;
    return this;
  }

   /**
   * Get collectType
   * @return collectType
  **/
  @javax.annotation.Nullable
  public CollectType getCollectType() {
    return collectType;
  }


  public void setCollectType(CollectType collectType) {
    this.collectType = collectType;
  }


  public FieldPropertySO commaStyle(String commaStyle) {
    
    this.commaStyle = commaStyle;
    return this;
  }

   /**
   * Get commaStyle
   * @return commaStyle
  **/
  @javax.annotation.Nullable
  public String getCommaStyle() {
    return commaStyle;
  }


  public void setCommaStyle(String commaStyle) {
    this.commaStyle = commaStyle;
  }


  public FieldPropertySO datasheetId(String datasheetId) {
    
    this.datasheetId = datasheetId;
    return this;
  }

   /**
   * Get datasheetId
   * @return datasheetId
  **/
  @javax.annotation.Nullable
  public String getDatasheetId() {
    return datasheetId;
  }


  public void setDatasheetId(String datasheetId) {
    this.datasheetId = datasheetId;
  }


  public FieldPropertySO dateFormat(DateFormat dateFormat) {
    
    this.dateFormat = dateFormat;
    return this;
  }

   /**
   * Get dateFormat
   * @return dateFormat
  **/
  @javax.annotation.Nullable
  public DateFormat getDateFormat() {
    return dateFormat;
  }


  public void setDateFormat(DateFormat dateFormat) {
    this.dateFormat = dateFormat;
  }


  public FieldPropertySO defaultValue(String defaultValue) {
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public FieldPropertySO expression(String expression) {
    
    this.expression = expression;
    return this;
  }

   /**
   * Get expression
   * @return expression
  **/
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }


  public void setExpression(String expression) {
    this.expression = expression;
  }


  public FieldPropertySO fieldIdCollection(List<String> fieldIdCollection) {
    
    this.fieldIdCollection = fieldIdCollection;
    return this;
  }

  public FieldPropertySO addFieldIdCollectionItem(String fieldIdCollectionItem) {
    if (this.fieldIdCollection == null) {
      this.fieldIdCollection = new ArrayList<>();
    }
    this.fieldIdCollection.add(fieldIdCollectionItem);
    return this;
  }

   /**
   * Get fieldIdCollection
   * @return fieldIdCollection
  **/
  @javax.annotation.Nullable
  public List<String> getFieldIdCollection() {
    return fieldIdCollection;
  }


  public void setFieldIdCollection(List<String> fieldIdCollection) {
    this.fieldIdCollection = fieldIdCollection;
  }


  public FieldPropertySO filterInfo(LookUpFilterPO filterInfo) {
    
    this.filterInfo = filterInfo;
    return this;
  }

   /**
   * Get filterInfo
   * @return filterInfo
  **/
  @javax.annotation.Nullable
  public LookUpFilterPO getFilterInfo() {
    return filterInfo;
  }


  public void setFilterInfo(LookUpFilterPO filterInfo) {
    this.filterInfo = filterInfo;
  }


  public FieldPropertySO foreignDatasheetId(String foreignDatasheetId) {
    
    this.foreignDatasheetId = foreignDatasheetId;
    return this;
  }

   /**
   * Get foreignDatasheetId
   * @return foreignDatasheetId
  **/
  @javax.annotation.Nullable
  public String getForeignDatasheetId() {
    return foreignDatasheetId;
  }


  public void setForeignDatasheetId(String foreignDatasheetId) {
    this.foreignDatasheetId = foreignDatasheetId;
  }


  public FieldPropertySO formatting(Object formatting) {
    
    this.formatting = formatting;
    return this;
  }

   /**
   * Get formatting
   * @return formatting
  **/
  @javax.annotation.Nullable
  public Object getFormatting() {
    return formatting;
  }


  public void setFormatting(Object formatting) {
    this.formatting = formatting;
  }


  public FieldPropertySO fullLinkedFields(List<LinkedFields> fullLinkedFields) {
    
    this.fullLinkedFields = fullLinkedFields;
    return this;
  }

  public FieldPropertySO addFullLinkedFieldsItem(LinkedFields fullLinkedFieldsItem) {
    if (this.fullLinkedFields == null) {
      this.fullLinkedFields = new ArrayList<>();
    }
    this.fullLinkedFields.add(fullLinkedFieldsItem);
    return this;
  }

   /**
   * Get fullLinkedFields
   * @return fullLinkedFields
  **/
  @javax.annotation.Nullable
  public List<LinkedFields> getFullLinkedFields() {
    return fullLinkedFields;
  }


  public void setFullLinkedFields(List<LinkedFields> fullLinkedFields) {
    this.fullLinkedFields = fullLinkedFields;
  }


  public FieldPropertySO icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public FieldPropertySO includeTime(Boolean includeTime) {
    
    this.includeTime = includeTime;
    return this;
  }

   /**
   * Get includeTime
   * @return includeTime
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeTime() {
    return includeTime;
  }


  public void setIncludeTime(Boolean includeTime) {
    this.includeTime = includeTime;
  }


  public FieldPropertySO includeTimeZone(Boolean includeTimeZone) {
    
    this.includeTimeZone = includeTimeZone;
    return this;
  }

   /**
   * Get includeTimeZone
   * @return includeTimeZone
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeTimeZone() {
    return includeTimeZone;
  }


  public void setIncludeTimeZone(Boolean includeTimeZone) {
    this.includeTimeZone = includeTimeZone;
  }


  public FieldPropertySO isMulti(Boolean isMulti) {
    
    this.isMulti = isMulti;
    return this;
  }

   /**
   * Get isMulti
   * @return isMulti
  **/
  @javax.annotation.Nullable
  public Boolean getIsMulti() {
    return isMulti;
  }


  public void setIsMulti(Boolean isMulti) {
    this.isMulti = isMulti;
  }


  public FieldPropertySO isRecogUrlFlag(Boolean isRecogUrlFlag) {
    
    this.isRecogUrlFlag = isRecogUrlFlag;
    return this;
  }

   /**
   * Get isRecogUrlFlag
   * @return isRecogUrlFlag
  **/
  @javax.annotation.Nullable
  public Boolean getIsRecogUrlFlag() {
    return isRecogUrlFlag;
  }


  public void setIsRecogUrlFlag(Boolean isRecogUrlFlag) {
    this.isRecogUrlFlag = isRecogUrlFlag;
  }


  public FieldPropertySO limitSingleRecord(Boolean limitSingleRecord) {
    
    this.limitSingleRecord = limitSingleRecord;
    return this;
  }

   /**
   * Get limitSingleRecord
   * @return limitSingleRecord
  **/
  @javax.annotation.Nullable
  public Boolean getLimitSingleRecord() {
    return limitSingleRecord;
  }


  public void setLimitSingleRecord(Boolean limitSingleRecord) {
    this.limitSingleRecord = limitSingleRecord;
  }


  public FieldPropertySO limitToView(String limitToView) {
    
    this.limitToView = limitToView;
    return this;
  }

   /**
   * Get limitToView
   * @return limitToView
  **/
  @javax.annotation.Nullable
  public String getLimitToView() {
    return limitToView;
  }


  public void setLimitToView(String limitToView) {
    this.limitToView = limitToView;
  }


  public FieldPropertySO linkedDatasheetId(String linkedDatasheetId) {
    
    this.linkedDatasheetId = linkedDatasheetId;
    return this;
  }

   /**
   * Get linkedDatasheetId
   * @return linkedDatasheetId
  **/
  @javax.annotation.Nullable
  public String getLinkedDatasheetId() {
    return linkedDatasheetId;
  }


  public void setLinkedDatasheetId(String linkedDatasheetId) {
    this.linkedDatasheetId = linkedDatasheetId;
  }


  public FieldPropertySO linkedFields(List<LinkedFields> linkedFields) {
    
    this.linkedFields = linkedFields;
    return this;
  }

  public FieldPropertySO addLinkedFieldsItem(LinkedFields linkedFieldsItem) {
    if (this.linkedFields == null) {
      this.linkedFields = new ArrayList<>();
    }
    this.linkedFields.add(linkedFieldsItem);
    return this;
  }

   /**
   * Get linkedFields
   * @return linkedFields
  **/
  @javax.annotation.Nullable
  public List<LinkedFields> getLinkedFields() {
    return linkedFields;
  }


  public void setLinkedFields(List<LinkedFields> linkedFields) {
    this.linkedFields = linkedFields;
  }


  public FieldPropertySO linkedViewId(String linkedViewId) {
    
    this.linkedViewId = linkedViewId;
    return this;
  }

   /**
   * Get linkedViewId
   * @return linkedViewId
  **/
  @javax.annotation.Nullable
  public String getLinkedViewId() {
    return linkedViewId;
  }


  public void setLinkedViewId(String linkedViewId) {
    this.linkedViewId = linkedViewId;
  }


  public FieldPropertySO lookUpLimit(Object lookUpLimit) {
    
    this.lookUpLimit = lookUpLimit;
    return this;
  }

   /**
   * Get lookUpLimit
   * @return lookUpLimit
  **/
  @javax.annotation.Nullable
  public Object getLookUpLimit() {
    return lookUpLimit;
  }


  public void setLookUpLimit(Object lookUpLimit) {
    this.lookUpLimit = lookUpLimit;
  }


  public FieldPropertySO lookUpTargetFieldId(String lookUpTargetFieldId) {
    
    this.lookUpTargetFieldId = lookUpTargetFieldId;
    return this;
  }

   /**
   * Get lookUpTargetFieldId
   * @return lookUpTargetFieldId
  **/
  @javax.annotation.Nullable
  public String getLookUpTargetFieldId() {
    return lookUpTargetFieldId;
  }


  public void setLookUpTargetFieldId(String lookUpTargetFieldId) {
    this.lookUpTargetFieldId = lookUpTargetFieldId;
  }


  public FieldPropertySO max(Integer max) {
    
    this.max = max;
    return this;
  }

   /**
   * Get max
   * minimum: 0
   * @return max
  **/
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }


  public void setMax(Integer max) {
    this.max = max;
  }


  public FieldPropertySO nextId(Integer nextId) {
    
    this.nextId = nextId;
    return this;
  }

   /**
   * Get nextId
   * @return nextId
  **/
  @javax.annotation.Nullable
  public Integer getNextId() {
    return nextId;
  }


  public void setNextId(Integer nextId) {
    this.nextId = nextId;
  }


  public FieldPropertySO openFilter(Boolean openFilter) {
    
    this.openFilter = openFilter;
    return this;
  }

   /**
   * Get openFilter
   * @return openFilter
  **/
  @javax.annotation.Nullable
  public Boolean getOpenFilter() {
    return openFilter;
  }


  public void setOpenFilter(Boolean openFilter) {
    this.openFilter = openFilter;
  }


  public FieldPropertySO options(List<SingleSelectProperty> options) {
    
    this.options = options;
    return this;
  }

  public FieldPropertySO addOptionsItem(SingleSelectProperty optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  public List<SingleSelectProperty> getOptions() {
    return options;
  }


  public void setOptions(List<SingleSelectProperty> options) {
    this.options = options;
  }


  public FieldPropertySO precision(Integer precision) {
    
    this.precision = precision;
    return this;
  }

   /**
   * Get precision
   * @return precision
  **/
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }


  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public FieldPropertySO relatedLinkFieldId(String relatedLinkFieldId) {
    
    this.relatedLinkFieldId = relatedLinkFieldId;
    return this;
  }

   /**
   * Get relatedLinkFieldId
   * @return relatedLinkFieldId
  **/
  @javax.annotation.Nullable
  public String getRelatedLinkFieldId() {
    return relatedLinkFieldId;
  }


  public void setRelatedLinkFieldId(String relatedLinkFieldId) {
    this.relatedLinkFieldId = relatedLinkFieldId;
  }


  public FieldPropertySO rollUpType(RollUpFuncType rollUpType) {
    
    this.rollUpType = rollUpType;
    return this;
  }

   /**
   * Get rollUpType
   * @return rollUpType
  **/
  @javax.annotation.Nullable
  public RollUpFuncType getRollUpType() {
    return rollUpType;
  }


  public void setRollUpType(RollUpFuncType rollUpType) {
    this.rollUpType = rollUpType;
  }


  public FieldPropertySO shouldSendMsg(Boolean shouldSendMsg) {
    
    this.shouldSendMsg = shouldSendMsg;
    return this;
  }

   /**
   * Get shouldSendMsg
   * @return shouldSendMsg
  **/
  @javax.annotation.Nullable
  public Boolean getShouldSendMsg() {
    return shouldSendMsg;
  }


  public void setShouldSendMsg(Boolean shouldSendMsg) {
    this.shouldSendMsg = shouldSendMsg;
  }


  public FieldPropertySO showAll(Boolean showAll) {
    
    this.showAll = showAll;
    return this;
  }

   /**
   * Get showAll
   * @return showAll
  **/
  @javax.annotation.Nullable
  public Boolean getShowAll() {
    return showAll;
  }


  public void setShowAll(Boolean showAll) {
    this.showAll = showAll;
  }


  public FieldPropertySO sortInfo(Object sortInfo) {
    
    this.sortInfo = sortInfo;
    return this;
  }

   /**
   * Get sortInfo
   * @return sortInfo
  **/
  @javax.annotation.Nullable
  public Object getSortInfo() {
    return sortInfo;
  }


  public void setSortInfo(Object sortInfo) {
    this.sortInfo = sortInfo;
  }


  public FieldPropertySO subscription(Boolean subscription) {
    
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  public Boolean getSubscription() {
    return subscription;
  }


  public void setSubscription(Boolean subscription) {
    this.subscription = subscription;
  }


  public FieldPropertySO symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public FieldPropertySO symbolAlign(SymbolAlign symbolAlign) {
    
    this.symbolAlign = symbolAlign;
    return this;
  }

   /**
   * Get symbolAlign
   * @return symbolAlign
  **/
  @javax.annotation.Nullable
  public SymbolAlign getSymbolAlign() {
    return symbolAlign;
  }


  public void setSymbolAlign(SymbolAlign symbolAlign) {
    this.symbolAlign = symbolAlign;
  }


  public FieldPropertySO timeFormat(TimeFormat timeFormat) {
    
    this.timeFormat = timeFormat;
    return this;
  }

   /**
   * Get timeFormat
   * @return timeFormat
  **/
  @javax.annotation.Nullable
  public TimeFormat getTimeFormat() {
    return timeFormat;
  }


  public void setTimeFormat(TimeFormat timeFormat) {
    this.timeFormat = timeFormat;
  }


  public FieldPropertySO timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public FieldPropertySO unitIds(List<String> unitIds) {
    
    this.unitIds = unitIds;
    return this;
  }

  public FieldPropertySO addUnitIdsItem(String unitIdsItem) {
    if (this.unitIds == null) {
      this.unitIds = new ArrayList<>();
    }
    this.unitIds.add(unitIdsItem);
    return this;
  }

   /**
   * Get unitIds
   * @return unitIds
  **/
  @javax.annotation.Nullable
  public List<String> getUnitIds() {
    return unitIds;
  }


  public void setUnitIds(List<String> unitIds) {
    this.unitIds = unitIds;
  }


  public FieldPropertySO uuids(List<String> uuids) {
    
    this.uuids = uuids;
    return this;
  }

  public FieldPropertySO addUuidsItem(String uuidsItem) {
    if (this.uuids == null) {
      this.uuids = new ArrayList<>();
    }
    this.uuids.add(uuidsItem);
    return this;
  }

   /**
   * Get uuids
   * @return uuids
  **/
  @javax.annotation.Nullable
  public List<String> getUuids() {
    return uuids;
  }


  public void setUuids(List<String> uuids) {
    this.uuids = uuids;
  }


  public FieldPropertySO viewIdx(Integer viewIdx) {
    
    this.viewIdx = viewIdx;
    return this;
  }

   /**
   * Get viewIdx
   * @return viewIdx
  **/
  @javax.annotation.Nullable
  public Integer getViewIdx() {
    return viewIdx;
  }


  public void setViewIdx(Integer viewIdx) {
    this.viewIdx = viewIdx;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldPropertySO fieldPropertySO = (FieldPropertySO) o;
    return Objects.equals(this.autoFill, fieldPropertySO.autoFill) &&
        Objects.equals(this.brotherFieldId, fieldPropertySO.brotherFieldId) &&
        Objects.equals(this.collectType, fieldPropertySO.collectType) &&
        Objects.equals(this.commaStyle, fieldPropertySO.commaStyle) &&
        Objects.equals(this.datasheetId, fieldPropertySO.datasheetId) &&
        Objects.equals(this.dateFormat, fieldPropertySO.dateFormat) &&
        Objects.equals(this.defaultValue, fieldPropertySO.defaultValue) &&
        Objects.equals(this.expression, fieldPropertySO.expression) &&
        Objects.equals(this.fieldIdCollection, fieldPropertySO.fieldIdCollection) &&
        Objects.equals(this.filterInfo, fieldPropertySO.filterInfo) &&
        Objects.equals(this.foreignDatasheetId, fieldPropertySO.foreignDatasheetId) &&
        Objects.equals(this.formatting, fieldPropertySO.formatting) &&
        Objects.equals(this.fullLinkedFields, fieldPropertySO.fullLinkedFields) &&
        Objects.equals(this.icon, fieldPropertySO.icon) &&
        Objects.equals(this.includeTime, fieldPropertySO.includeTime) &&
        Objects.equals(this.includeTimeZone, fieldPropertySO.includeTimeZone) &&
        Objects.equals(this.isMulti, fieldPropertySO.isMulti) &&
        Objects.equals(this.isRecogUrlFlag, fieldPropertySO.isRecogUrlFlag) &&
        Objects.equals(this.limitSingleRecord, fieldPropertySO.limitSingleRecord) &&
        Objects.equals(this.limitToView, fieldPropertySO.limitToView) &&
        Objects.equals(this.linkedDatasheetId, fieldPropertySO.linkedDatasheetId) &&
        Objects.equals(this.linkedFields, fieldPropertySO.linkedFields) &&
        Objects.equals(this.linkedViewId, fieldPropertySO.linkedViewId) &&
        Objects.equals(this.lookUpLimit, fieldPropertySO.lookUpLimit) &&
        Objects.equals(this.lookUpTargetFieldId, fieldPropertySO.lookUpTargetFieldId) &&
        Objects.equals(this.max, fieldPropertySO.max) &&
        Objects.equals(this.nextId, fieldPropertySO.nextId) &&
        Objects.equals(this.openFilter, fieldPropertySO.openFilter) &&
        Objects.equals(this.options, fieldPropertySO.options) &&
        Objects.equals(this.precision, fieldPropertySO.precision) &&
        Objects.equals(this.relatedLinkFieldId, fieldPropertySO.relatedLinkFieldId) &&
        Objects.equals(this.rollUpType, fieldPropertySO.rollUpType) &&
        Objects.equals(this.shouldSendMsg, fieldPropertySO.shouldSendMsg) &&
        Objects.equals(this.showAll, fieldPropertySO.showAll) &&
        Objects.equals(this.sortInfo, fieldPropertySO.sortInfo) &&
        Objects.equals(this.subscription, fieldPropertySO.subscription) &&
        Objects.equals(this.symbol, fieldPropertySO.symbol) &&
        Objects.equals(this.symbolAlign, fieldPropertySO.symbolAlign) &&
        Objects.equals(this.timeFormat, fieldPropertySO.timeFormat) &&
        Objects.equals(this.timeZone, fieldPropertySO.timeZone) &&
        Objects.equals(this.unitIds, fieldPropertySO.unitIds) &&
        Objects.equals(this.uuids, fieldPropertySO.uuids) &&
        Objects.equals(this.viewIdx, fieldPropertySO.viewIdx);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoFill, brotherFieldId, collectType, commaStyle, datasheetId, dateFormat, defaultValue, expression, fieldIdCollection, filterInfo, foreignDatasheetId, formatting, fullLinkedFields, icon, includeTime, includeTimeZone, isMulti, isRecogUrlFlag, limitSingleRecord, limitToView, linkedDatasheetId, linkedFields, linkedViewId, lookUpLimit, lookUpTargetFieldId, max, nextId, openFilter, options, precision, relatedLinkFieldId, rollUpType, shouldSendMsg, showAll, sortInfo, subscription, symbol, symbolAlign, timeFormat, timeZone, unitIds, uuids, viewIdx);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldPropertySO {\n");
    sb.append("    autoFill: ").append(toIndentedString(autoFill)).append("\n");
    sb.append("    brotherFieldId: ").append(toIndentedString(brotherFieldId)).append("\n");
    sb.append("    collectType: ").append(toIndentedString(collectType)).append("\n");
    sb.append("    commaStyle: ").append(toIndentedString(commaStyle)).append("\n");
    sb.append("    datasheetId: ").append(toIndentedString(datasheetId)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    fieldIdCollection: ").append(toIndentedString(fieldIdCollection)).append("\n");
    sb.append("    filterInfo: ").append(toIndentedString(filterInfo)).append("\n");
    sb.append("    foreignDatasheetId: ").append(toIndentedString(foreignDatasheetId)).append("\n");
    sb.append("    formatting: ").append(toIndentedString(formatting)).append("\n");
    sb.append("    fullLinkedFields: ").append(toIndentedString(fullLinkedFields)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    includeTime: ").append(toIndentedString(includeTime)).append("\n");
    sb.append("    includeTimeZone: ").append(toIndentedString(includeTimeZone)).append("\n");
    sb.append("    isMulti: ").append(toIndentedString(isMulti)).append("\n");
    sb.append("    isRecogUrlFlag: ").append(toIndentedString(isRecogUrlFlag)).append("\n");
    sb.append("    limitSingleRecord: ").append(toIndentedString(limitSingleRecord)).append("\n");
    sb.append("    limitToView: ").append(toIndentedString(limitToView)).append("\n");
    sb.append("    linkedDatasheetId: ").append(toIndentedString(linkedDatasheetId)).append("\n");
    sb.append("    linkedFields: ").append(toIndentedString(linkedFields)).append("\n");
    sb.append("    linkedViewId: ").append(toIndentedString(linkedViewId)).append("\n");
    sb.append("    lookUpLimit: ").append(toIndentedString(lookUpLimit)).append("\n");
    sb.append("    lookUpTargetFieldId: ").append(toIndentedString(lookUpTargetFieldId)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    nextId: ").append(toIndentedString(nextId)).append("\n");
    sb.append("    openFilter: ").append(toIndentedString(openFilter)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    relatedLinkFieldId: ").append(toIndentedString(relatedLinkFieldId)).append("\n");
    sb.append("    rollUpType: ").append(toIndentedString(rollUpType)).append("\n");
    sb.append("    shouldSendMsg: ").append(toIndentedString(shouldSendMsg)).append("\n");
    sb.append("    showAll: ").append(toIndentedString(showAll)).append("\n");
    sb.append("    sortInfo: ").append(toIndentedString(sortInfo)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    symbolAlign: ").append(toIndentedString(symbolAlign)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    unitIds: ").append(toIndentedString(unitIds)).append("\n");
    sb.append("    uuids: ").append(toIndentedString(uuids)).append("\n");
    sb.append("    viewIdx: ").append(toIndentedString(viewIdx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoFill");
    openapiFields.add("brotherFieldId");
    openapiFields.add("collectType");
    openapiFields.add("commaStyle");
    openapiFields.add("datasheetId");
    openapiFields.add("dateFormat");
    openapiFields.add("defaultValue");
    openapiFields.add("expression");
    openapiFields.add("fieldIdCollection");
    openapiFields.add("filterInfo");
    openapiFields.add("foreignDatasheetId");
    openapiFields.add("formatting");
    openapiFields.add("fullLinkedFields");
    openapiFields.add("icon");
    openapiFields.add("includeTime");
    openapiFields.add("includeTimeZone");
    openapiFields.add("isMulti");
    openapiFields.add("isRecogUrlFlag");
    openapiFields.add("limitSingleRecord");
    openapiFields.add("limitToView");
    openapiFields.add("linkedDatasheetId");
    openapiFields.add("linkedFields");
    openapiFields.add("linkedViewId");
    openapiFields.add("lookUpLimit");
    openapiFields.add("lookUpTargetFieldId");
    openapiFields.add("max");
    openapiFields.add("nextId");
    openapiFields.add("openFilter");
    openapiFields.add("options");
    openapiFields.add("precision");
    openapiFields.add("relatedLinkFieldId");
    openapiFields.add("rollUpType");
    openapiFields.add("shouldSendMsg");
    openapiFields.add("showAll");
    openapiFields.add("sortInfo");
    openapiFields.add("subscription");
    openapiFields.add("symbol");
    openapiFields.add("symbolAlign");
    openapiFields.add("timeFormat");
    openapiFields.add("timeZone");
    openapiFields.add("unitIds");
    openapiFields.add("uuids");
    openapiFields.add("viewIdx");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FieldPropertySO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldPropertySO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldPropertySO is not found in the empty JSON string", FieldPropertySO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FieldPropertySO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldPropertySO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brotherFieldId") != null && !jsonObj.get("brotherFieldId").isJsonNull()) && !jsonObj.get("brotherFieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brotherFieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brotherFieldId").toString()));
      }
      if ((jsonObj.get("commaStyle") != null && !jsonObj.get("commaStyle").isJsonNull()) && !jsonObj.get("commaStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commaStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commaStyle").toString()));
      }
      if ((jsonObj.get("datasheetId") != null && !jsonObj.get("datasheetId").isJsonNull()) && !jsonObj.get("datasheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasheetId").toString()));
      }
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fieldIdCollection") != null && !jsonObj.get("fieldIdCollection").isJsonNull() && !jsonObj.get("fieldIdCollection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldIdCollection` to be an array in the JSON string but got `%s`", jsonObj.get("fieldIdCollection").toString()));
      }
      // validate the optional field `filterInfo`
      if (jsonObj.get("filterInfo") != null && !jsonObj.get("filterInfo").isJsonNull()) {
        LookUpFilterPO.validateJsonElement(jsonObj.get("filterInfo"));
      }
      if ((jsonObj.get("foreignDatasheetId") != null && !jsonObj.get("foreignDatasheetId").isJsonNull()) && !jsonObj.get("foreignDatasheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignDatasheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignDatasheetId").toString()));
      }
      if (jsonObj.get("fullLinkedFields") != null && !jsonObj.get("fullLinkedFields").isJsonNull()) {
        JsonArray jsonArrayfullLinkedFields = jsonObj.getAsJsonArray("fullLinkedFields");
        if (jsonArrayfullLinkedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fullLinkedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fullLinkedFields` to be an array in the JSON string but got `%s`", jsonObj.get("fullLinkedFields").toString()));
          }

          // validate the optional field `fullLinkedFields` (array)
          for (int i = 0; i < jsonArrayfullLinkedFields.size(); i++) {
            LinkedFields.validateJsonElement(jsonArrayfullLinkedFields.get(i));
          };
        }
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("limitToView") != null && !jsonObj.get("limitToView").isJsonNull()) && !jsonObj.get("limitToView").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitToView` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitToView").toString()));
      }
      if ((jsonObj.get("linkedDatasheetId") != null && !jsonObj.get("linkedDatasheetId").isJsonNull()) && !jsonObj.get("linkedDatasheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedDatasheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedDatasheetId").toString()));
      }
      if (jsonObj.get("linkedFields") != null && !jsonObj.get("linkedFields").isJsonNull()) {
        JsonArray jsonArraylinkedFields = jsonObj.getAsJsonArray("linkedFields");
        if (jsonArraylinkedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedFields` to be an array in the JSON string but got `%s`", jsonObj.get("linkedFields").toString()));
          }

          // validate the optional field `linkedFields` (array)
          for (int i = 0; i < jsonArraylinkedFields.size(); i++) {
            LinkedFields.validateJsonElement(jsonArraylinkedFields.get(i));
          };
        }
      }
      if ((jsonObj.get("linkedViewId") != null && !jsonObj.get("linkedViewId").isJsonNull()) && !jsonObj.get("linkedViewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedViewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedViewId").toString()));
      }
      if ((jsonObj.get("lookUpTargetFieldId") != null && !jsonObj.get("lookUpTargetFieldId").isJsonNull()) && !jsonObj.get("lookUpTargetFieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookUpTargetFieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookUpTargetFieldId").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            SingleSelectProperty.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if ((jsonObj.get("relatedLinkFieldId") != null && !jsonObj.get("relatedLinkFieldId").isJsonNull()) && !jsonObj.get("relatedLinkFieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedLinkFieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedLinkFieldId").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unitIds") != null && !jsonObj.get("unitIds").isJsonNull() && !jsonObj.get("unitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitIds` to be an array in the JSON string but got `%s`", jsonObj.get("unitIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uuids") != null && !jsonObj.get("uuids").isJsonNull() && !jsonObj.get("uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuids` to be an array in the JSON string but got `%s`", jsonObj.get("uuids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldPropertySO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldPropertySO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldPropertySO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldPropertySO.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldPropertySO>() {
           @Override
           public void write(JsonWriter out, FieldPropertySO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldPropertySO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FieldPropertySO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FieldPropertySO
  * @throws IOException if the JSON string is invalid with respect to FieldPropertySO
  */
  public static FieldPropertySO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldPropertySO.class);
  }

 /**
  * Convert an instance of FieldPropertySO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

