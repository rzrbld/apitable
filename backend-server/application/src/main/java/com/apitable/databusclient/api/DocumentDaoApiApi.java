/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.api;

import com.apitable.databusclient.ApiCallback;
import com.apitable.databusclient.ApiClient;
import com.apitable.databusclient.ApiException;
import com.apitable.databusclient.ApiResponse;
import com.apitable.databusclient.Configuration;
import com.apitable.databusclient.Pair;
import com.apitable.databusclient.ProgressRequestBody;
import com.apitable.databusclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.apitable.databusclient.model.DocumentOperationRO;
import com.apitable.databusclient.model.DocumentRO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentDaoApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentDaoApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentDaoApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for daoCreateDocumentOperation
     * @param documentName document name (required)
     * @param documentOperationRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create document operation successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateDocumentOperationCall(String documentName, DocumentOperationRO documentOperationRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentOperationRO;

        // create path and map variables
        String localVarPath = "/databus/dao/documents/{document_name}/operations"
            .replace("{" + "document_name" + "}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCreateDocumentOperationValidateBeforeCall(String documentName, DocumentOperationRO documentOperationRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling daoCreateDocumentOperation(Async)");
        }

        // verify the required parameter 'documentOperationRO' is set
        if (documentOperationRO == null) {
            throw new ApiException("Missing the required parameter 'documentOperationRO' when calling daoCreateDocumentOperation(Async)");
        }

        return daoCreateDocumentOperationCall(documentName, documentOperationRO, _callback);

    }

    /**
     * create document operation success
     * create document operation success
     * @param documentName document name (required)
     * @param documentOperationRO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create document operation successfully </td><td>  -  </td></tr>
     </table>
     */
    public void daoCreateDocumentOperation(String documentName, DocumentOperationRO documentOperationRO) throws ApiException {
        daoCreateDocumentOperationWithHttpInfo(documentName, documentOperationRO);
    }

    /**
     * create document operation success
     * create document operation success
     * @param documentName document name (required)
     * @param documentOperationRO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create document operation successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoCreateDocumentOperationWithHttpInfo(String documentName, DocumentOperationRO documentOperationRO) throws ApiException {
        okhttp3.Call localVarCall = daoCreateDocumentOperationValidateBeforeCall(documentName, documentOperationRO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create document operation success (asynchronously)
     * create document operation success
     * @param documentName document name (required)
     * @param documentOperationRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create document operation successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateDocumentOperationAsync(String documentName, DocumentOperationRO documentOperationRO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCreateDocumentOperationValidateBeforeCall(documentName, documentOperationRO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoCreateOrUpdateDocument
     * @param documentName document name (required)
     * @param documentRO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create or update document successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateDocumentCall(String documentName, DocumentRO documentRO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentRO;

        // create path and map variables
        String localVarPath = "/databus/dao/documents/{document_name}"
            .replace("{" + "document_name" + "}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoCreateOrUpdateDocumentValidateBeforeCall(String documentName, DocumentRO documentRO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling daoCreateOrUpdateDocument(Async)");
        }

        // verify the required parameter 'documentRO' is set
        if (documentRO == null) {
            throw new ApiException("Missing the required parameter 'documentRO' when calling daoCreateOrUpdateDocument(Async)");
        }

        return daoCreateOrUpdateDocumentCall(documentName, documentRO, _callback);

    }

    /**
     * Create or update document
     * Create or update document
     * @param documentName document name (required)
     * @param documentRO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create or update document successfully </td><td>  -  </td></tr>
     </table>
     */
    public void daoCreateOrUpdateDocument(String documentName, DocumentRO documentRO) throws ApiException {
        daoCreateOrUpdateDocumentWithHttpInfo(documentName, documentRO);
    }

    /**
     * Create or update document
     * Create or update document
     * @param documentName document name (required)
     * @param documentRO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create or update document successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoCreateOrUpdateDocumentWithHttpInfo(String documentName, DocumentRO documentRO) throws ApiException {
        okhttp3.Call localVarCall = daoCreateOrUpdateDocumentValidateBeforeCall(documentName, documentRO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update document (asynchronously)
     * Create or update document
     * @param documentName document name (required)
     * @param documentRO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create or update document successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoCreateOrUpdateDocumentAsync(String documentName, DocumentRO documentRO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoCreateOrUpdateDocumentValidateBeforeCall(documentName, documentRO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetDocumentData
     * @param documentName document name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get document data successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetDocumentDataCall(String documentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/documents/{document_name}/data"
            .replace("{" + "document_name" + "}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetDocumentDataValidateBeforeCall(String documentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling daoGetDocumentData(Async)");
        }

        return daoGetDocumentDataCall(documentName, _callback);

    }

    /**
     * Get document data
     * Get document data
     * @param documentName document name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get document data successfully </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetDocumentData(String documentName) throws ApiException {
        daoGetDocumentDataWithHttpInfo(documentName);
    }

    /**
     * Get document data
     * Get document data
     * @param documentName document name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get document data successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetDocumentDataWithHttpInfo(String documentName) throws ApiException {
        okhttp3.Call localVarCall = daoGetDocumentDataValidateBeforeCall(documentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get document data (asynchronously)
     * Get document data
     * @param documentName document name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get document data successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetDocumentDataAsync(String documentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetDocumentDataValidateBeforeCall(documentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetNewDocumentName
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get new document name successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetNewDocumentNameCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/documents/name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetNewDocumentNameValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return daoGetNewDocumentNameCall(_callback);

    }

    /**
     * Get new document name
     * Get new document name
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get new document name successfully </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetNewDocumentName() throws ApiException {
        daoGetNewDocumentNameWithHttpInfo();
    }

    /**
     * Get new document name
     * Get new document name
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get new document name successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetNewDocumentNameWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = daoGetNewDocumentNameValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get new document name (asynchronously)
     * Get new document name
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get new document name successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetNewDocumentNameAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetNewDocumentNameValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
