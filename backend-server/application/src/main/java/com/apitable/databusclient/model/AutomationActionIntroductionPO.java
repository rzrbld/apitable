/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 0.99.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * AutomationActionIntroductionPO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T18:25:43.276+08:00[Asia/Shanghai]")
public class AutomationActionIntroductionPO {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_ACTION_TYPE_ID = "actionTypeId";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE_ID)
  private String actionTypeId;

  public static final String SERIALIZED_NAME_PREV_ACTION_ID = "prevActionId";
  @SerializedName(SERIALIZED_NAME_PREV_ACTION_ID)
  private String prevActionId;

  public static final String SERIALIZED_NAME_ROBOT_ID = "robotId";
  @SerializedName(SERIALIZED_NAME_ROBOT_ID)
  private String robotId;

  public AutomationActionIntroductionPO() {
  }

  public AutomationActionIntroductionPO actionId(String actionId) {
    
    this.actionId = actionId;
    return this;
  }

   /**
   * Get actionId
   * @return actionId
  **/
  @javax.annotation.Nonnull
  public String getActionId() {
    return actionId;
  }


  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public AutomationActionIntroductionPO actionTypeId(String actionTypeId) {
    
    this.actionTypeId = actionTypeId;
    return this;
  }

   /**
   * Get actionTypeId
   * @return actionTypeId
  **/
  @javax.annotation.Nonnull
  public String getActionTypeId() {
    return actionTypeId;
  }


  public void setActionTypeId(String actionTypeId) {
    this.actionTypeId = actionTypeId;
  }


  public AutomationActionIntroductionPO prevActionId(String prevActionId) {
    
    this.prevActionId = prevActionId;
    return this;
  }

   /**
   * Get prevActionId
   * @return prevActionId
  **/
  @javax.annotation.Nullable
  public String getPrevActionId() {
    return prevActionId;
  }


  public void setPrevActionId(String prevActionId) {
    this.prevActionId = prevActionId;
  }


  public AutomationActionIntroductionPO robotId(String robotId) {
    
    this.robotId = robotId;
    return this;
  }

   /**
   * Get robotId
   * @return robotId
  **/
  @javax.annotation.Nonnull
  public String getRobotId() {
    return robotId;
  }


  public void setRobotId(String robotId) {
    this.robotId = robotId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationActionIntroductionPO automationActionIntroductionPO = (AutomationActionIntroductionPO) o;
    return Objects.equals(this.actionId, automationActionIntroductionPO.actionId) &&
        Objects.equals(this.actionTypeId, automationActionIntroductionPO.actionTypeId) &&
        Objects.equals(this.prevActionId, automationActionIntroductionPO.prevActionId) &&
        Objects.equals(this.robotId, automationActionIntroductionPO.robotId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, actionTypeId, prevActionId, robotId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationActionIntroductionPO {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    actionTypeId: ").append(toIndentedString(actionTypeId)).append("\n");
    sb.append("    prevActionId: ").append(toIndentedString(prevActionId)).append("\n");
    sb.append("    robotId: ").append(toIndentedString(robotId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("actionTypeId");
    openapiFields.add("prevActionId");
    openapiFields.add("robotId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionId");
    openapiRequiredFields.add("actionTypeId");
    openapiRequiredFields.add("robotId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutomationActionIntroductionPO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AutomationActionIntroductionPO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationActionIntroductionPO is not found in the empty JSON string", AutomationActionIntroductionPO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutomationActionIntroductionPO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationActionIntroductionPO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutomationActionIntroductionPO.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("actionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionId").toString()));
      }
      if (!jsonObj.get("actionTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionTypeId").toString()));
      }
      if ((jsonObj.get("prevActionId") != null && !jsonObj.get("prevActionId").isJsonNull()) && !jsonObj.get("prevActionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevActionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevActionId").toString()));
      }
      if (!jsonObj.get("robotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `robotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("robotId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationActionIntroductionPO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationActionIntroductionPO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationActionIntroductionPO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationActionIntroductionPO.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationActionIntroductionPO>() {
           @Override
           public void write(JsonWriter out, AutomationActionIntroductionPO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationActionIntroductionPO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutomationActionIntroductionPO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutomationActionIntroductionPO
  * @throws IOException if the JSON string is invalid with respect to AutomationActionIntroductionPO
  */
  public static AutomationActionIntroductionPO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationActionIntroductionPO.class);
  }

 /**
  * Convert an instance of AutomationActionIntroductionPO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

