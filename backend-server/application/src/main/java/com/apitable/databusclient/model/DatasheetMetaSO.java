/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.FieldSO;
import com.apitable.databusclient.model.ViewSO;
import com.apitable.databusclient.model.WidgetPanelSO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * DatasheetMetaSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatasheetMetaSO {
  public static final String SERIALIZED_NAME_ARCHIVED_RECORD_IDS = "archivedRecordIds";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_RECORD_IDS)
  private List<String> archivedRecordIds;

  public static final String SERIALIZED_NAME_FIELD_MAP = "fieldMap";
  @SerializedName(SERIALIZED_NAME_FIELD_MAP)
  private Map<String, FieldSO> fieldMap = new HashMap<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private List<ViewSO> views = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIDGET_PANELS = "widgetPanels";
  @SerializedName(SERIALIZED_NAME_WIDGET_PANELS)
  private List<WidgetPanelSO> widgetPanels;

  public DatasheetMetaSO() {
  }

  public DatasheetMetaSO archivedRecordIds(List<String> archivedRecordIds) {
    
    this.archivedRecordIds = archivedRecordIds;
    return this;
  }

  public DatasheetMetaSO addArchivedRecordIdsItem(String archivedRecordIdsItem) {
    if (this.archivedRecordIds == null) {
      this.archivedRecordIds = new ArrayList<>();
    }
    this.archivedRecordIds.add(archivedRecordIdsItem);
    return this;
  }

   /**
   * Get archivedRecordIds
   * @return archivedRecordIds
  **/
  @javax.annotation.Nullable
  public List<String> getArchivedRecordIds() {
    return archivedRecordIds;
  }


  public void setArchivedRecordIds(List<String> archivedRecordIds) {
    this.archivedRecordIds = archivedRecordIds;
  }


  public DatasheetMetaSO fieldMap(Map<String, FieldSO> fieldMap) {
    
    this.fieldMap = fieldMap;
    return this;
  }

  public DatasheetMetaSO putFieldMapItem(String key, FieldSO fieldMapItem) {
    if (this.fieldMap == null) {
      this.fieldMap = new HashMap<>();
    }
    this.fieldMap.put(key, fieldMapItem);
    return this;
  }

   /**
   * Get fieldMap
   * @return fieldMap
  **/
  @javax.annotation.Nonnull
  public Map<String, FieldSO> getFieldMap() {
    return fieldMap;
  }


  public void setFieldMap(Map<String, FieldSO> fieldMap) {
    this.fieldMap = fieldMap;
  }


  public DatasheetMetaSO views(List<ViewSO> views) {
    
    this.views = views;
    return this;
  }

  public DatasheetMetaSO addViewsItem(ViewSO viewsItem) {
    if (this.views == null) {
      this.views = new ArrayList<>();
    }
    this.views.add(viewsItem);
    return this;
  }

   /**
   * Get views
   * @return views
  **/
  @javax.annotation.Nonnull
  public List<ViewSO> getViews() {
    return views;
  }


  public void setViews(List<ViewSO> views) {
    this.views = views;
  }


  public DatasheetMetaSO widgetPanels(List<WidgetPanelSO> widgetPanels) {
    
    this.widgetPanels = widgetPanels;
    return this;
  }

  public DatasheetMetaSO addWidgetPanelsItem(WidgetPanelSO widgetPanelsItem) {
    if (this.widgetPanels == null) {
      this.widgetPanels = new ArrayList<>();
    }
    this.widgetPanels.add(widgetPanelsItem);
    return this;
  }

   /**
   * Get widgetPanels
   * @return widgetPanels
  **/
  @javax.annotation.Nullable
  public List<WidgetPanelSO> getWidgetPanels() {
    return widgetPanels;
  }


  public void setWidgetPanels(List<WidgetPanelSO> widgetPanels) {
    this.widgetPanels = widgetPanels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasheetMetaSO datasheetMetaSO = (DatasheetMetaSO) o;
    return Objects.equals(this.archivedRecordIds, datasheetMetaSO.archivedRecordIds) &&
        Objects.equals(this.fieldMap, datasheetMetaSO.fieldMap) &&
        Objects.equals(this.views, datasheetMetaSO.views) &&
        Objects.equals(this.widgetPanels, datasheetMetaSO.widgetPanels);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedRecordIds, fieldMap, views, widgetPanels);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasheetMetaSO {\n");
    sb.append("    archivedRecordIds: ").append(toIndentedString(archivedRecordIds)).append("\n");
    sb.append("    fieldMap: ").append(toIndentedString(fieldMap)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    widgetPanels: ").append(toIndentedString(widgetPanels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archivedRecordIds");
    openapiFields.add("fieldMap");
    openapiFields.add("views");
    openapiFields.add("widgetPanels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldMap");
    openapiRequiredFields.add("views");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DatasheetMetaSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasheetMetaSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasheetMetaSO is not found in the empty JSON string", DatasheetMetaSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DatasheetMetaSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasheetMetaSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatasheetMetaSO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("archivedRecordIds") != null && !jsonObj.get("archivedRecordIds").isJsonNull() && !jsonObj.get("archivedRecordIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `archivedRecordIds` to be an array in the JSON string but got `%s`", jsonObj.get("archivedRecordIds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("views").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `views` to be an array in the JSON string but got `%s`", jsonObj.get("views").toString()));
      }

      JsonArray jsonArrayviews = jsonObj.getAsJsonArray("views");
      // validate the required field `views` (array)
      for (int i = 0; i < jsonArrayviews.size(); i++) {
        ViewSO.validateJsonElement(jsonArrayviews.get(i));
      };
      if (jsonObj.get("widgetPanels") != null && !jsonObj.get("widgetPanels").isJsonNull()) {
        JsonArray jsonArraywidgetPanels = jsonObj.getAsJsonArray("widgetPanels");
        if (jsonArraywidgetPanels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("widgetPanels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `widgetPanels` to be an array in the JSON string but got `%s`", jsonObj.get("widgetPanels").toString()));
          }

          // validate the optional field `widgetPanels` (array)
          for (int i = 0; i < jsonArraywidgetPanels.size(); i++) {
            WidgetPanelSO.validateJsonElement(jsonArraywidgetPanels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasheetMetaSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasheetMetaSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasheetMetaSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasheetMetaSO.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasheetMetaSO>() {
           @Override
           public void write(JsonWriter out, DatasheetMetaSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasheetMetaSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatasheetMetaSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatasheetMetaSO
  * @throws IOException if the JSON string is invalid with respect to DatasheetMetaSO
  */
  public static DatasheetMetaSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasheetMetaSO.class);
  }

 /**
  * Convert an instance of DatasheetMetaSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

