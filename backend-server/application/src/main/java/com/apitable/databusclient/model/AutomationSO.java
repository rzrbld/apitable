/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.AutomationActionPO;
import com.apitable.databusclient.model.AutomationRobotSO;
import com.apitable.databusclient.model.AutomationTriggerPO;
import com.apitable.databusclient.model.NodeSimplePO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * AutomationSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutomationSO {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<AutomationActionPO> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_RESOURCES = "relatedResources";
  @SerializedName(SERIALIZED_NAME_RELATED_RESOURCES)
  private List<NodeSimplePO> relatedResources;

  public static final String SERIALIZED_NAME_ROBOT = "robot";
  @SerializedName(SERIALIZED_NAME_ROBOT)
  private AutomationRobotSO robot;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<AutomationTriggerPO> triggers = new ArrayList<>();

  public AutomationSO() {
  }

  public AutomationSO actions(List<AutomationActionPO> actions) {
    
    this.actions = actions;
    return this;
  }

  public AutomationSO addActionsItem(AutomationActionPO actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nonnull
  public List<AutomationActionPO> getActions() {
    return actions;
  }


  public void setActions(List<AutomationActionPO> actions) {
    this.actions = actions;
  }


  public AutomationSO relatedResources(List<NodeSimplePO> relatedResources) {
    
    this.relatedResources = relatedResources;
    return this;
  }

  public AutomationSO addRelatedResourcesItem(NodeSimplePO relatedResourcesItem) {
    if (this.relatedResources == null) {
      this.relatedResources = new ArrayList<>();
    }
    this.relatedResources.add(relatedResourcesItem);
    return this;
  }

   /**
   * Get relatedResources
   * @return relatedResources
  **/
  @javax.annotation.Nullable
  public List<NodeSimplePO> getRelatedResources() {
    return relatedResources;
  }


  public void setRelatedResources(List<NodeSimplePO> relatedResources) {
    this.relatedResources = relatedResources;
  }


  public AutomationSO robot(AutomationRobotSO robot) {
    
    this.robot = robot;
    return this;
  }

   /**
   * Get robot
   * @return robot
  **/
  @javax.annotation.Nonnull
  public AutomationRobotSO getRobot() {
    return robot;
  }


  public void setRobot(AutomationRobotSO robot) {
    this.robot = robot;
  }


  public AutomationSO triggers(List<AutomationTriggerPO> triggers) {
    
    this.triggers = triggers;
    return this;
  }

  public AutomationSO addTriggersItem(AutomationTriggerPO triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

   /**
   * Get triggers
   * @return triggers
  **/
  @javax.annotation.Nonnull
  public List<AutomationTriggerPO> getTriggers() {
    return triggers;
  }


  public void setTriggers(List<AutomationTriggerPO> triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationSO automationSO = (AutomationSO) o;
    return Objects.equals(this.actions, automationSO.actions) &&
        Objects.equals(this.relatedResources, automationSO.relatedResources) &&
        Objects.equals(this.robot, automationSO.robot) &&
        Objects.equals(this.triggers, automationSO.triggers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, relatedResources, robot, triggers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationSO {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    relatedResources: ").append(toIndentedString(relatedResources)).append("\n");
    sb.append("    robot: ").append(toIndentedString(robot)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("relatedResources");
    openapiFields.add("robot");
    openapiFields.add("triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actions");
    openapiRequiredFields.add("robot");
    openapiRequiredFields.add("triggers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AutomationSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationSO is not found in the empty JSON string", AutomationSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutomationSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutomationSO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }

      JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
      // validate the required field `actions` (array)
      for (int i = 0; i < jsonArrayactions.size(); i++) {
        AutomationActionPO.validateJsonElement(jsonArrayactions.get(i));
      };
      if (jsonObj.get("relatedResources") != null && !jsonObj.get("relatedResources").isJsonNull()) {
        JsonArray jsonArrayrelatedResources = jsonObj.getAsJsonArray("relatedResources");
        if (jsonArrayrelatedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedResources` to be an array in the JSON string but got `%s`", jsonObj.get("relatedResources").toString()));
          }

          // validate the optional field `relatedResources` (array)
          for (int i = 0; i < jsonArrayrelatedResources.size(); i++) {
            NodeSimplePO.validateJsonElement(jsonArrayrelatedResources.get(i));
          };
        }
      }
      // validate the required field `robot`
      AutomationRobotSO.validateJsonElement(jsonObj.get("robot"));
      // ensure the json data is an array
      if (!jsonObj.get("triggers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
      }

      JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
      // validate the required field `triggers` (array)
      for (int i = 0; i < jsonArraytriggers.size(); i++) {
        AutomationTriggerPO.validateJsonElement(jsonArraytriggers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationSO.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationSO>() {
           @Override
           public void write(JsonWriter out, AutomationSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutomationSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutomationSO
  * @throws IOException if the JSON string is invalid with respect to AutomationSO
  */
  public static AutomationSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationSO.class);
  }

 /**
  * Convert an instance of AutomationSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

