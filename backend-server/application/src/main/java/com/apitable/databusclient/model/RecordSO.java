/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.Comments;
import com.apitable.databusclient.model.RecordMeta;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * RecordSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordSO {
  public static final String SERIALIZED_NAME_COMMENT_COUNT = "commentCount";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Comments> comments;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Long createdAt;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RECORD_META = "recordMeta";
  @SerializedName(SERIALIZED_NAME_RECORD_META)
  private RecordMeta recordMeta;

  public static final String SERIALIZED_NAME_REVISION_HISTORY = "revisionHistory";
  @SerializedName(SERIALIZED_NAME_REVISION_HISTORY)
  private List<Integer> revisionHistory;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Long updatedAt;

  public RecordSO() {
  }

  public RecordSO commentCount(Integer commentCount) {
    
    this.commentCount = commentCount;
    return this;
  }

   /**
   * Get commentCount
   * minimum: 0
   * @return commentCount
  **/
  @javax.annotation.Nonnull
  public Integer getCommentCount() {
    return commentCount;
  }


  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }


  public RecordSO comments(List<Comments> comments) {
    
    this.comments = comments;
    return this;
  }

  public RecordSO addCommentsItem(Comments commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  public List<Comments> getComments() {
    return comments;
  }


  public void setComments(List<Comments> comments) {
    this.comments = comments;
  }


  public RecordSO createdAt(Long createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public Long getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  public RecordSO data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public RecordSO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RecordSO recordMeta(RecordMeta recordMeta) {
    
    this.recordMeta = recordMeta;
    return this;
  }

   /**
   * Get recordMeta
   * @return recordMeta
  **/
  @javax.annotation.Nullable
  public RecordMeta getRecordMeta() {
    return recordMeta;
  }


  public void setRecordMeta(RecordMeta recordMeta) {
    this.recordMeta = recordMeta;
  }


  public RecordSO revisionHistory(List<Integer> revisionHistory) {
    
    this.revisionHistory = revisionHistory;
    return this;
  }

  public RecordSO addRevisionHistoryItem(Integer revisionHistoryItem) {
    if (this.revisionHistory == null) {
      this.revisionHistory = new ArrayList<>();
    }
    this.revisionHistory.add(revisionHistoryItem);
    return this;
  }

   /**
   * Get revisionHistory
   * @return revisionHistory
  **/
  @javax.annotation.Nullable
  public List<Integer> getRevisionHistory() {
    return revisionHistory;
  }


  public void setRevisionHistory(List<Integer> revisionHistory) {
    this.revisionHistory = revisionHistory;
  }


  public RecordSO updatedAt(Long updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public Long getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordSO recordSO = (RecordSO) o;
    return Objects.equals(this.commentCount, recordSO.commentCount) &&
        Objects.equals(this.comments, recordSO.comments) &&
        Objects.equals(this.createdAt, recordSO.createdAt) &&
        Objects.equals(this.data, recordSO.data) &&
        Objects.equals(this.id, recordSO.id) &&
        Objects.equals(this.recordMeta, recordSO.recordMeta) &&
        Objects.equals(this.revisionHistory, recordSO.revisionHistory) &&
        Objects.equals(this.updatedAt, recordSO.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentCount, comments, createdAt, data, id, recordMeta, revisionHistory, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordSO {\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recordMeta: ").append(toIndentedString(recordMeta)).append("\n");
    sb.append("    revisionHistory: ").append(toIndentedString(revisionHistory)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commentCount");
    openapiFields.add("comments");
    openapiFields.add("createdAt");
    openapiFields.add("data");
    openapiFields.add("id");
    openapiFields.add("recordMeta");
    openapiFields.add("revisionHistory");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commentCount");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecordSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordSO is not found in the empty JSON string", RecordSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RecordSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordSO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
        if (jsonArraycomments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
          }

          // validate the optional field `comments` (array)
          for (int i = 0; i < jsonArraycomments.size(); i++) {
            Comments.validateJsonElement(jsonArraycomments.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `recordMeta`
      if (jsonObj.get("recordMeta") != null && !jsonObj.get("recordMeta").isJsonNull()) {
        RecordMeta.validateJsonElement(jsonObj.get("recordMeta"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revisionHistory") != null && !jsonObj.get("revisionHistory").isJsonNull() && !jsonObj.get("revisionHistory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionHistory` to be an array in the JSON string but got `%s`", jsonObj.get("revisionHistory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordSO.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordSO>() {
           @Override
           public void write(JsonWriter out, RecordSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecordSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecordSO
  * @throws IOException if the JSON string is invalid with respect to RecordSO
  */
  public static RecordSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordSO.class);
  }

 /**
  * Convert an instance of RecordSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

