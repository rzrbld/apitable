/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * AutomationTriggerPO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutomationTriggerPO {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_PREV_TRIGGER_ID = "prevTriggerId";
  @SerializedName(SERIALIZED_NAME_PREV_TRIGGER_ID)
  private String prevTriggerId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_ROBOT_ID = "robotId";
  @SerializedName(SERIALIZED_NAME_ROBOT_ID)
  private String robotId;

  public static final String SERIALIZED_NAME_TRIGGER_ID = "triggerId";
  @SerializedName(SERIALIZED_NAME_TRIGGER_ID)
  private String triggerId;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE_ID = "triggerTypeId";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE_ID)
  private String triggerTypeId;

  public AutomationTriggerPO() {
  }

  public AutomationTriggerPO input(String input) {
    
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }


  public void setInput(String input) {
    this.input = input;
  }


  public AutomationTriggerPO prevTriggerId(String prevTriggerId) {
    
    this.prevTriggerId = prevTriggerId;
    return this;
  }

   /**
   * Get prevTriggerId
   * @return prevTriggerId
  **/
  @javax.annotation.Nullable
  public String getPrevTriggerId() {
    return prevTriggerId;
  }


  public void setPrevTriggerId(String prevTriggerId) {
    this.prevTriggerId = prevTriggerId;
  }


  public AutomationTriggerPO resourceId(String resourceId) {
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }


  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public AutomationTriggerPO robotId(String robotId) {
    
    this.robotId = robotId;
    return this;
  }

   /**
   * Get robotId
   * @return robotId
  **/
  @javax.annotation.Nonnull
  public String getRobotId() {
    return robotId;
  }


  public void setRobotId(String robotId) {
    this.robotId = robotId;
  }


  public AutomationTriggerPO triggerId(String triggerId) {
    
    this.triggerId = triggerId;
    return this;
  }

   /**
   * Get triggerId
   * @return triggerId
  **/
  @javax.annotation.Nonnull
  public String getTriggerId() {
    return triggerId;
  }


  public void setTriggerId(String triggerId) {
    this.triggerId = triggerId;
  }


  public AutomationTriggerPO triggerTypeId(String triggerTypeId) {
    
    this.triggerTypeId = triggerTypeId;
    return this;
  }

   /**
   * Get triggerTypeId
   * @return triggerTypeId
  **/
  @javax.annotation.Nonnull
  public String getTriggerTypeId() {
    return triggerTypeId;
  }


  public void setTriggerTypeId(String triggerTypeId) {
    this.triggerTypeId = triggerTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationTriggerPO automationTriggerPO = (AutomationTriggerPO) o;
    return Objects.equals(this.input, automationTriggerPO.input) &&
        Objects.equals(this.prevTriggerId, automationTriggerPO.prevTriggerId) &&
        Objects.equals(this.resourceId, automationTriggerPO.resourceId) &&
        Objects.equals(this.robotId, automationTriggerPO.robotId) &&
        Objects.equals(this.triggerId, automationTriggerPO.triggerId) &&
        Objects.equals(this.triggerTypeId, automationTriggerPO.triggerTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, prevTriggerId, resourceId, robotId, triggerId, triggerTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationTriggerPO {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    prevTriggerId: ").append(toIndentedString(prevTriggerId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    robotId: ").append(toIndentedString(robotId)).append("\n");
    sb.append("    triggerId: ").append(toIndentedString(triggerId)).append("\n");
    sb.append("    triggerTypeId: ").append(toIndentedString(triggerTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("prevTriggerId");
    openapiFields.add("resourceId");
    openapiFields.add("robotId");
    openapiFields.add("triggerId");
    openapiFields.add("triggerTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("robotId");
    openapiRequiredFields.add("triggerId");
    openapiRequiredFields.add("triggerTypeId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AutomationTriggerPO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationTriggerPO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationTriggerPO is not found in the empty JSON string", AutomationTriggerPO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutomationTriggerPO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationTriggerPO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutomationTriggerPO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) && !jsonObj.get("input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input").toString()));
      }
      if ((jsonObj.get("prevTriggerId") != null && !jsonObj.get("prevTriggerId").isJsonNull()) && !jsonObj.get("prevTriggerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevTriggerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevTriggerId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if (!jsonObj.get("robotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `robotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("robotId").toString()));
      }
      if (!jsonObj.get("triggerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerId").toString()));
      }
      if (!jsonObj.get("triggerTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationTriggerPO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationTriggerPO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationTriggerPO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationTriggerPO.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationTriggerPO>() {
           @Override
           public void write(JsonWriter out, AutomationTriggerPO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationTriggerPO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutomationTriggerPO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutomationTriggerPO
  * @throws IOException if the JSON string is invalid with respect to AutomationTriggerPO
  */
  public static AutomationTriggerPO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationTriggerPO.class);
  }

 /**
  * Convert an instance of AutomationTriggerPO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

