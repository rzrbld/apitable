/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.FieldExtraMapValue;
import com.apitable.databusclient.model.FieldUpdatedValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * RecordMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordMeta {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Long createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_FIELD_EXTRA_MAP = "fieldExtraMap";
  @SerializedName(SERIALIZED_NAME_FIELD_EXTRA_MAP)
  private Map<String, FieldExtraMapValue> fieldExtraMap;

  public static final String SERIALIZED_NAME_FIELD_UPDATED_MAP = "fieldUpdatedMap";
  @SerializedName(SERIALIZED_NAME_FIELD_UPDATED_MAP)
  private Map<String, FieldUpdatedValue> fieldUpdatedMap;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Long updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public RecordMeta() {
  }

  public RecordMeta createdAt(Long createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * minimum: 0
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public Long getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  public RecordMeta createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public RecordMeta fieldExtraMap(Map<String, FieldExtraMapValue> fieldExtraMap) {
    
    this.fieldExtraMap = fieldExtraMap;
    return this;
  }

  public RecordMeta putFieldExtraMapItem(String key, FieldExtraMapValue fieldExtraMapItem) {
    if (this.fieldExtraMap == null) {
      this.fieldExtraMap = new HashMap<>();
    }
    this.fieldExtraMap.put(key, fieldExtraMapItem);
    return this;
  }

   /**
   * Get fieldExtraMap
   * @return fieldExtraMap
  **/
  @javax.annotation.Nullable
  public Map<String, FieldExtraMapValue> getFieldExtraMap() {
    return fieldExtraMap;
  }


  public void setFieldExtraMap(Map<String, FieldExtraMapValue> fieldExtraMap) {
    this.fieldExtraMap = fieldExtraMap;
  }


  public RecordMeta fieldUpdatedMap(Map<String, FieldUpdatedValue> fieldUpdatedMap) {
    
    this.fieldUpdatedMap = fieldUpdatedMap;
    return this;
  }

  public RecordMeta putFieldUpdatedMapItem(String key, FieldUpdatedValue fieldUpdatedMapItem) {
    if (this.fieldUpdatedMap == null) {
      this.fieldUpdatedMap = new HashMap<>();
    }
    this.fieldUpdatedMap.put(key, fieldUpdatedMapItem);
    return this;
  }

   /**
   * Get fieldUpdatedMap
   * @return fieldUpdatedMap
  **/
  @javax.annotation.Nullable
  public Map<String, FieldUpdatedValue> getFieldUpdatedMap() {
    return fieldUpdatedMap;
  }


  public void setFieldUpdatedMap(Map<String, FieldUpdatedValue> fieldUpdatedMap) {
    this.fieldUpdatedMap = fieldUpdatedMap;
  }


  public RecordMeta updatedAt(Long updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * minimum: 0
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public Long getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }


  public RecordMeta updatedBy(String updatedBy) {
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordMeta recordMeta = (RecordMeta) o;
    return Objects.equals(this.createdAt, recordMeta.createdAt) &&
        Objects.equals(this.createdBy, recordMeta.createdBy) &&
        Objects.equals(this.fieldExtraMap, recordMeta.fieldExtraMap) &&
        Objects.equals(this.fieldUpdatedMap, recordMeta.fieldUpdatedMap) &&
        Objects.equals(this.updatedAt, recordMeta.updatedAt) &&
        Objects.equals(this.updatedBy, recordMeta.updatedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, createdBy, fieldExtraMap, fieldUpdatedMap, updatedAt, updatedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordMeta {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    fieldExtraMap: ").append(toIndentedString(fieldExtraMap)).append("\n");
    sb.append("    fieldUpdatedMap: ").append(toIndentedString(fieldUpdatedMap)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("fieldExtraMap");
    openapiFields.add("fieldUpdatedMap");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecordMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordMeta is not found in the empty JSON string", RecordMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RecordMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordMeta>() {
           @Override
           public void write(JsonWriter out, RecordMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecordMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecordMeta
  * @throws IOException if the JSON string is invalid with respect to RecordMeta
  */
  public static RecordMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordMeta.class);
  }

 /**
  * Convert an instance of RecordMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

