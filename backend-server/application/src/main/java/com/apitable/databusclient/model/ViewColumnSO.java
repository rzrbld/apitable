/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * ViewColumnSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ViewColumnSO {
  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_HIDDEN_IN_CALENDAR = "hiddenInCalendar";
  @SerializedName(SERIALIZED_NAME_HIDDEN_IN_CALENDAR)
  private Boolean hiddenInCalendar;

  public static final String SERIALIZED_NAME_HIDDEN_IN_GANTT = "hiddenInGantt";
  @SerializedName(SERIALIZED_NAME_HIDDEN_IN_GANTT)
  private Boolean hiddenInGantt;

  public static final String SERIALIZED_NAME_HIDDEN_IN_ORG_CHART = "hiddenInOrgChart";
  @SerializedName(SERIALIZED_NAME_HIDDEN_IN_ORG_CHART)
  private Boolean hiddenInOrgChart;

  public static final String SERIALIZED_NAME_STAT_TYPE = "statType";
  @SerializedName(SERIALIZED_NAME_STAT_TYPE)
  private Integer statType;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public ViewColumnSO() {
  }

  public ViewColumnSO fieldId(String fieldId) {
    
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Get fieldId
   * @return fieldId
  **/
  @javax.annotation.Nonnull
  public String getFieldId() {
    return fieldId;
  }


  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }


  public ViewColumnSO hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * Get hidden
   * @return hidden
  **/
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public ViewColumnSO hiddenInCalendar(Boolean hiddenInCalendar) {
    
    this.hiddenInCalendar = hiddenInCalendar;
    return this;
  }

   /**
   * Get hiddenInCalendar
   * @return hiddenInCalendar
  **/
  @javax.annotation.Nullable
  public Boolean getHiddenInCalendar() {
    return hiddenInCalendar;
  }


  public void setHiddenInCalendar(Boolean hiddenInCalendar) {
    this.hiddenInCalendar = hiddenInCalendar;
  }


  public ViewColumnSO hiddenInGantt(Boolean hiddenInGantt) {
    
    this.hiddenInGantt = hiddenInGantt;
    return this;
  }

   /**
   * Get hiddenInGantt
   * @return hiddenInGantt
  **/
  @javax.annotation.Nullable
  public Boolean getHiddenInGantt() {
    return hiddenInGantt;
  }


  public void setHiddenInGantt(Boolean hiddenInGantt) {
    this.hiddenInGantt = hiddenInGantt;
  }


  public ViewColumnSO hiddenInOrgChart(Boolean hiddenInOrgChart) {
    
    this.hiddenInOrgChart = hiddenInOrgChart;
    return this;
  }

   /**
   * Get hiddenInOrgChart
   * @return hiddenInOrgChart
  **/
  @javax.annotation.Nullable
  public Boolean getHiddenInOrgChart() {
    return hiddenInOrgChart;
  }


  public void setHiddenInOrgChart(Boolean hiddenInOrgChart) {
    this.hiddenInOrgChart = hiddenInOrgChart;
  }


  public ViewColumnSO statType(Integer statType) {
    
    this.statType = statType;
    return this;
  }

   /**
   * Get statType
   * @return statType
  **/
  @javax.annotation.Nullable
  public Integer getStatType() {
    return statType;
  }


  public void setStatType(Integer statType) {
    this.statType = statType;
  }


  public ViewColumnSO width(Double width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  public Double getWidth() {
    return width;
  }


  public void setWidth(Double width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewColumnSO viewColumnSO = (ViewColumnSO) o;
    return Objects.equals(this.fieldId, viewColumnSO.fieldId) &&
        Objects.equals(this.hidden, viewColumnSO.hidden) &&
        Objects.equals(this.hiddenInCalendar, viewColumnSO.hiddenInCalendar) &&
        Objects.equals(this.hiddenInGantt, viewColumnSO.hiddenInGantt) &&
        Objects.equals(this.hiddenInOrgChart, viewColumnSO.hiddenInOrgChart) &&
        Objects.equals(this.statType, viewColumnSO.statType) &&
        Objects.equals(this.width, viewColumnSO.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, hidden, hiddenInCalendar, hiddenInGantt, hiddenInOrgChart, statType, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewColumnSO {\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    hiddenInCalendar: ").append(toIndentedString(hiddenInCalendar)).append("\n");
    sb.append("    hiddenInGantt: ").append(toIndentedString(hiddenInGantt)).append("\n");
    sb.append("    hiddenInOrgChart: ").append(toIndentedString(hiddenInOrgChart)).append("\n");
    sb.append("    statType: ").append(toIndentedString(statType)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldId");
    openapiFields.add("hidden");
    openapiFields.add("hiddenInCalendar");
    openapiFields.add("hiddenInGantt");
    openapiFields.add("hiddenInOrgChart");
    openapiFields.add("statType");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ViewColumnSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewColumnSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewColumnSO is not found in the empty JSON string", ViewColumnSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ViewColumnSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewColumnSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ViewColumnSO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewColumnSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewColumnSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewColumnSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewColumnSO.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewColumnSO>() {
           @Override
           public void write(JsonWriter out, ViewColumnSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewColumnSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ViewColumnSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ViewColumnSO
  * @throws IOException if the JSON string is invalid with respect to ViewColumnSO
  */
  public static ViewColumnSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewColumnSO.class);
  }

 /**
  * Convert an instance of ViewColumnSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

