/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.AlarmUser;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * RecordAlarm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecordAlarm {
  public static final String SERIALIZED_NAME_ALARM_AT = "alarmAt";
  @SerializedName(SERIALIZED_NAME_ALARM_AT)
  private String alarmAt;

  public static final String SERIALIZED_NAME_ALARM_USERS = "alarmUsers";
  @SerializedName(SERIALIZED_NAME_ALARM_USERS)
  private List<AlarmUser> alarmUsers;

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  private String recordId;

  public static final String SERIALIZED_NAME_SUBTRACT = "subtract";
  @SerializedName(SERIALIZED_NAME_SUBTRACT)
  private String subtract;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public RecordAlarm() {
  }

  public RecordAlarm alarmAt(String alarmAt) {
    
    this.alarmAt = alarmAt;
    return this;
  }

   /**
   * Get alarmAt
   * @return alarmAt
  **/
  @javax.annotation.Nullable
  public String getAlarmAt() {
    return alarmAt;
  }


  public void setAlarmAt(String alarmAt) {
    this.alarmAt = alarmAt;
  }


  public RecordAlarm alarmUsers(List<AlarmUser> alarmUsers) {
    
    this.alarmUsers = alarmUsers;
    return this;
  }

  public RecordAlarm addAlarmUsersItem(AlarmUser alarmUsersItem) {
    if (this.alarmUsers == null) {
      this.alarmUsers = new ArrayList<>();
    }
    this.alarmUsers.add(alarmUsersItem);
    return this;
  }

   /**
   * Get alarmUsers
   * @return alarmUsers
  **/
  @javax.annotation.Nullable
  public List<AlarmUser> getAlarmUsers() {
    return alarmUsers;
  }


  public void setAlarmUsers(List<AlarmUser> alarmUsers) {
    this.alarmUsers = alarmUsers;
  }


  public RecordAlarm fieldId(String fieldId) {
    
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Get fieldId
   * @return fieldId
  **/
  @javax.annotation.Nullable
  public String getFieldId() {
    return fieldId;
  }


  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }


  public RecordAlarm id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RecordAlarm recordId(String recordId) {
    
    this.recordId = recordId;
    return this;
  }

   /**
   * Get recordId
   * @return recordId
  **/
  @javax.annotation.Nullable
  public String getRecordId() {
    return recordId;
  }


  public void setRecordId(String recordId) {
    this.recordId = recordId;
  }


  public RecordAlarm subtract(String subtract) {
    
    this.subtract = subtract;
    return this;
  }

   /**
   * Get subtract
   * @return subtract
  **/
  @javax.annotation.Nullable
  public String getSubtract() {
    return subtract;
  }


  public void setSubtract(String subtract) {
    this.subtract = subtract;
  }


  public RecordAlarm time(String time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }


  public void setTime(String time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordAlarm recordAlarm = (RecordAlarm) o;
    return Objects.equals(this.alarmAt, recordAlarm.alarmAt) &&
        Objects.equals(this.alarmUsers, recordAlarm.alarmUsers) &&
        Objects.equals(this.fieldId, recordAlarm.fieldId) &&
        Objects.equals(this.id, recordAlarm.id) &&
        Objects.equals(this.recordId, recordAlarm.recordId) &&
        Objects.equals(this.subtract, recordAlarm.subtract) &&
        Objects.equals(this.time, recordAlarm.time);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmAt, alarmUsers, fieldId, id, recordId, subtract, time);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordAlarm {\n");
    sb.append("    alarmAt: ").append(toIndentedString(alarmAt)).append("\n");
    sb.append("    alarmUsers: ").append(toIndentedString(alarmUsers)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    subtract: ").append(toIndentedString(subtract)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alarmAt");
    openapiFields.add("alarmUsers");
    openapiFields.add("fieldId");
    openapiFields.add("id");
    openapiFields.add("recordId");
    openapiFields.add("subtract");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RecordAlarm
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordAlarm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordAlarm is not found in the empty JSON string", RecordAlarm.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RecordAlarm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordAlarm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordAlarm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alarmAt") != null && !jsonObj.get("alarmAt").isJsonNull()) && !jsonObj.get("alarmAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alarmAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alarmAt").toString()));
      }
      if (jsonObj.get("alarmUsers") != null && !jsonObj.get("alarmUsers").isJsonNull()) {
        JsonArray jsonArrayalarmUsers = jsonObj.getAsJsonArray("alarmUsers");
        if (jsonArrayalarmUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alarmUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alarmUsers` to be an array in the JSON string but got `%s`", jsonObj.get("alarmUsers").toString()));
          }

          // validate the optional field `alarmUsers` (array)
          for (int i = 0; i < jsonArrayalarmUsers.size(); i++) {
            AlarmUser.validateJsonElement(jsonArrayalarmUsers.get(i));
          };
        }
      }
      if ((jsonObj.get("fieldId") != null && !jsonObj.get("fieldId").isJsonNull()) && !jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("recordId") != null && !jsonObj.get("recordId").isJsonNull()) && !jsonObj.get("recordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordId").toString()));
      }
      if ((jsonObj.get("subtract") != null && !jsonObj.get("subtract").isJsonNull()) && !jsonObj.get("subtract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtract").toString()));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordAlarm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordAlarm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordAlarm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordAlarm.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordAlarm>() {
           @Override
           public void write(JsonWriter out, RecordAlarm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordAlarm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecordAlarm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecordAlarm
  * @throws IOException if the JSON string is invalid with respect to RecordAlarm
  */
  public static RecordAlarm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordAlarm.class);
  }

 /**
  * Convert an instance of RecordAlarm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

