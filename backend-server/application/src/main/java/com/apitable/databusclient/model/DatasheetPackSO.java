/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.apitable.databusclient.model.BaseDatasheetPackSO;
import com.apitable.databusclient.model.DatasheetSnapshotSO;
import com.apitable.databusclient.model.NodeSO;
import com.apitable.databusclient.model.UnitSO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * DatasheetPackSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DatasheetPackSO {
  public static final String SERIALIZED_NAME_DATASHEET = "datasheet";
  @SerializedName(SERIALIZED_NAME_DATASHEET)
  private NodeSO datasheet;

  public static final String SERIALIZED_NAME_FIELD_PERMISSION_MAP = "fieldPermissionMap";
  @SerializedName(SERIALIZED_NAME_FIELD_PERMISSION_MAP)
  private Object fieldPermissionMap = null;

  public static final String SERIALIZED_NAME_FOREIGN_DATASHEET_MAP = "foreignDatasheetMap";
  @SerializedName(SERIALIZED_NAME_FOREIGN_DATASHEET_MAP)
  private Map<String, BaseDatasheetPackSO> foreignDatasheetMap;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private DatasheetSnapshotSO snapshot;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<UnitSO> units;

  public DatasheetPackSO() {
  }

  public DatasheetPackSO datasheet(NodeSO datasheet) {
    
    this.datasheet = datasheet;
    return this;
  }

   /**
   * Get datasheet
   * @return datasheet
  **/
  @javax.annotation.Nonnull
  public NodeSO getDatasheet() {
    return datasheet;
  }


  public void setDatasheet(NodeSO datasheet) {
    this.datasheet = datasheet;
  }


  public DatasheetPackSO fieldPermissionMap(Object fieldPermissionMap) {
    
    this.fieldPermissionMap = fieldPermissionMap;
    return this;
  }

   /**
   * Get fieldPermissionMap
   * @return fieldPermissionMap
  **/
  @javax.annotation.Nullable
  public Object getFieldPermissionMap() {
    return fieldPermissionMap;
  }


  public void setFieldPermissionMap(Object fieldPermissionMap) {
    this.fieldPermissionMap = fieldPermissionMap;
  }


  public DatasheetPackSO foreignDatasheetMap(Map<String, BaseDatasheetPackSO> foreignDatasheetMap) {
    
    this.foreignDatasheetMap = foreignDatasheetMap;
    return this;
  }

  public DatasheetPackSO putForeignDatasheetMapItem(String key, BaseDatasheetPackSO foreignDatasheetMapItem) {
    if (this.foreignDatasheetMap == null) {
      this.foreignDatasheetMap = new HashMap<>();
    }
    this.foreignDatasheetMap.put(key, foreignDatasheetMapItem);
    return this;
  }

   /**
   * Get foreignDatasheetMap
   * @return foreignDatasheetMap
  **/
  @javax.annotation.Nullable
  public Map<String, BaseDatasheetPackSO> getForeignDatasheetMap() {
    return foreignDatasheetMap;
  }


  public void setForeignDatasheetMap(Map<String, BaseDatasheetPackSO> foreignDatasheetMap) {
    this.foreignDatasheetMap = foreignDatasheetMap;
  }


  public DatasheetPackSO snapshot(DatasheetSnapshotSO snapshot) {
    
    this.snapshot = snapshot;
    return this;
  }

   /**
   * Get snapshot
   * @return snapshot
  **/
  @javax.annotation.Nonnull
  public DatasheetSnapshotSO getSnapshot() {
    return snapshot;
  }


  public void setSnapshot(DatasheetSnapshotSO snapshot) {
    this.snapshot = snapshot;
  }


  public DatasheetPackSO units(List<UnitSO> units) {
    
    this.units = units;
    return this;
  }

  public DatasheetPackSO addUnitsItem(UnitSO unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  public List<UnitSO> getUnits() {
    return units;
  }


  public void setUnits(List<UnitSO> units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasheetPackSO datasheetPackSO = (DatasheetPackSO) o;
    return Objects.equals(this.datasheet, datasheetPackSO.datasheet) &&
        Objects.equals(this.fieldPermissionMap, datasheetPackSO.fieldPermissionMap) &&
        Objects.equals(this.foreignDatasheetMap, datasheetPackSO.foreignDatasheetMap) &&
        Objects.equals(this.snapshot, datasheetPackSO.snapshot) &&
        Objects.equals(this.units, datasheetPackSO.units);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasheet, fieldPermissionMap, foreignDatasheetMap, snapshot, units);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasheetPackSO {\n");
    sb.append("    datasheet: ").append(toIndentedString(datasheet)).append("\n");
    sb.append("    fieldPermissionMap: ").append(toIndentedString(fieldPermissionMap)).append("\n");
    sb.append("    foreignDatasheetMap: ").append(toIndentedString(foreignDatasheetMap)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasheet");
    openapiFields.add("fieldPermissionMap");
    openapiFields.add("foreignDatasheetMap");
    openapiFields.add("snapshot");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("datasheet");
    openapiRequiredFields.add("snapshot");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DatasheetPackSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasheetPackSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasheetPackSO is not found in the empty JSON string", DatasheetPackSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DatasheetPackSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasheetPackSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatasheetPackSO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `datasheet`
      NodeSO.validateJsonElement(jsonObj.get("datasheet"));
      // validate the required field `snapshot`
      DatasheetSnapshotSO.validateJsonElement(jsonObj.get("snapshot"));
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) {
        JsonArray jsonArrayunits = jsonObj.getAsJsonArray("units");
        if (jsonArrayunits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("units").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
          }

          // validate the optional field `units` (array)
          for (int i = 0; i < jsonArrayunits.size(); i++) {
            UnitSO.validateJsonElement(jsonArrayunits.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasheetPackSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasheetPackSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasheetPackSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasheetPackSO.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasheetPackSO>() {
           @Override
           public void write(JsonWriter out, DatasheetPackSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasheetPackSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatasheetPackSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatasheetPackSO
  * @throws IOException if the JSON string is invalid with respect to DatasheetPackSO
  */
  public static DatasheetPackSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasheetPackSO.class);
  }

 /**
  * Convert an instance of DatasheetPackSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

