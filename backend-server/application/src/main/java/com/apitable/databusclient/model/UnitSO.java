/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.apitable.databusclient.JSON;

/**
 * UnitSO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UnitSO {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_AVATAR_COLOR = "avatarColor";
  @SerializedName(SERIALIZED_NAME_AVATAR_COLOR)
  private Integer avatarColor;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Integer isActive;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Integer isDeleted;

  public static final String SERIALIZED_NAME_IS_MEMBER_NAME_MODIFIED = "isMemberNameModified";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER_NAME_MODIFIED)
  private Boolean isMemberNameModified;

  public static final String SERIALIZED_NAME_IS_NICK_NAME_MODIFIED = "isNickNameModified";
  @SerializedName(SERIALIZED_NAME_IS_NICK_NAME_MODIFIED)
  private Boolean isNickNameModified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_ORIGINAL_UNIT_ID = "originalUnitId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_UNIT_ID)
  private String originalUnitId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_UNIT_ID = "unitId";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private String unitId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public UnitSO() {
  }

  public UnitSO avatar(String avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }


  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public UnitSO avatarColor(Integer avatarColor) {
    
    this.avatarColor = avatarColor;
    return this;
  }

   /**
   * Get avatarColor
   * @return avatarColor
  **/
  @javax.annotation.Nullable
  public Integer getAvatarColor() {
    return avatarColor;
  }


  public void setAvatarColor(Integer avatarColor) {
    this.avatarColor = avatarColor;
  }


  public UnitSO isActive(Integer isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * minimum: 0
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Integer getIsActive() {
    return isActive;
  }


  public void setIsActive(Integer isActive) {
    this.isActive = isActive;
  }


  public UnitSO isDeleted(Integer isDeleted) {
    
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Get isDeleted
   * minimum: 0
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Integer getIsDeleted() {
    return isDeleted;
  }


  public void setIsDeleted(Integer isDeleted) {
    this.isDeleted = isDeleted;
  }


  public UnitSO isMemberNameModified(Boolean isMemberNameModified) {
    
    this.isMemberNameModified = isMemberNameModified;
    return this;
  }

   /**
   * Get isMemberNameModified
   * @return isMemberNameModified
  **/
  @javax.annotation.Nullable
  public Boolean getIsMemberNameModified() {
    return isMemberNameModified;
  }


  public void setIsMemberNameModified(Boolean isMemberNameModified) {
    this.isMemberNameModified = isMemberNameModified;
  }


  public UnitSO isNickNameModified(Boolean isNickNameModified) {
    
    this.isNickNameModified = isNickNameModified;
    return this;
  }

   /**
   * Get isNickNameModified
   * @return isNickNameModified
  **/
  @javax.annotation.Nullable
  public Boolean getIsNickNameModified() {
    return isNickNameModified;
  }


  public void setIsNickNameModified(Boolean isNickNameModified) {
    this.isNickNameModified = isNickNameModified;
  }


  public UnitSO name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UnitSO nickName(String nickName) {
    
    this.nickName = nickName;
    return this;
  }

   /**
   * Get nickName
   * @return nickName
  **/
  @javax.annotation.Nullable
  public String getNickName() {
    return nickName;
  }


  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public UnitSO originalUnitId(String originalUnitId) {
    
    this.originalUnitId = originalUnitId;
    return this;
  }

   /**
   * Get originalUnitId
   * @return originalUnitId
  **/
  @javax.annotation.Nullable
  public String getOriginalUnitId() {
    return originalUnitId;
  }


  public void setOriginalUnitId(String originalUnitId) {
    this.originalUnitId = originalUnitId;
  }


  public UnitSO type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * minimum: 0
   * @return type
  **/
  @javax.annotation.Nullable
  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  public UnitSO unitId(String unitId) {
    
    this.unitId = unitId;
    return this;
  }

   /**
   * Get unitId
   * @return unitId
  **/
  @javax.annotation.Nullable
  public String getUnitId() {
    return unitId;
  }


  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public UnitSO userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public UnitSO uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitSO unitSO = (UnitSO) o;
    return Objects.equals(this.avatar, unitSO.avatar) &&
        Objects.equals(this.avatarColor, unitSO.avatarColor) &&
        Objects.equals(this.isActive, unitSO.isActive) &&
        Objects.equals(this.isDeleted, unitSO.isDeleted) &&
        Objects.equals(this.isMemberNameModified, unitSO.isMemberNameModified) &&
        Objects.equals(this.isNickNameModified, unitSO.isNickNameModified) &&
        Objects.equals(this.name, unitSO.name) &&
        Objects.equals(this.nickName, unitSO.nickName) &&
        Objects.equals(this.originalUnitId, unitSO.originalUnitId) &&
        Objects.equals(this.type, unitSO.type) &&
        Objects.equals(this.unitId, unitSO.unitId) &&
        Objects.equals(this.userId, unitSO.userId) &&
        Objects.equals(this.uuid, unitSO.uuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, avatarColor, isActive, isDeleted, isMemberNameModified, isNickNameModified, name, nickName, originalUnitId, type, unitId, userId, uuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitSO {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    avatarColor: ").append(toIndentedString(avatarColor)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isMemberNameModified: ").append(toIndentedString(isMemberNameModified)).append("\n");
    sb.append("    isNickNameModified: ").append(toIndentedString(isNickNameModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    originalUnitId: ").append(toIndentedString(originalUnitId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("avatarColor");
    openapiFields.add("isActive");
    openapiFields.add("isDeleted");
    openapiFields.add("isMemberNameModified");
    openapiFields.add("isNickNameModified");
    openapiFields.add("name");
    openapiFields.add("nickName");
    openapiFields.add("originalUnitId");
    openapiFields.add("type");
    openapiFields.add("unitId");
    openapiFields.add("userId");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UnitSO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitSO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitSO is not found in the empty JSON string", UnitSO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UnitSO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitSO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("originalUnitId") != null && !jsonObj.get("originalUnitId").isJsonNull()) && !jsonObj.get("originalUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalUnitId").toString()));
      }
      if ((jsonObj.get("unitId") != null && !jsonObj.get("unitId").isJsonNull()) && !jsonObj.get("unitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitSO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitSO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitSO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitSO.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitSO>() {
           @Override
           public void write(JsonWriter out, UnitSO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitSO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UnitSO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UnitSO
  * @throws IOException if the JSON string is invalid with respect to UnitSO
  */
  public static UnitSO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitSO.class);
  }

 /**
  * Convert an instance of UnitSO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

