/*
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apitable.databusclient.api;

import com.apitable.databusclient.ApiCallback;
import com.apitable.databusclient.ApiClient;
import com.apitable.databusclient.ApiException;
import com.apitable.databusclient.ApiResponse;
import com.apitable.databusclient.Configuration;
import com.apitable.databusclient.Pair;
import com.apitable.databusclient.ProgressRequestBody;
import com.apitable.databusclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.apitable.databusclient.model.ApiResponseAiPO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataDaoApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataDaoApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataDaoApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for daoGetAiDatasheetIds
     * @param aiId ai id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI&#39;s datasheets success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiDatasheetIdsCall(String aiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/get_ai_datasheet_ids/{ai_id}"
            .replace("{" + "ai_id" + "}", localVarApiClient.escapeString(aiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAiDatasheetIdsValidateBeforeCall(String aiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aiId' is set
        if (aiId == null) {
            throw new ApiException("Missing the required parameter 'aiId' when calling daoGetAiDatasheetIds(Async)");
        }

        return daoGetAiDatasheetIdsCall(aiId, _callback);

    }

    /**
     * Get AI&#39;s binding datasheet ids by AI ID
     * Get AI&#39;s binding datasheet ids by AI ID
     * @param aiId ai id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI&#39;s datasheets success </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetAiDatasheetIds(String aiId) throws ApiException {
        daoGetAiDatasheetIdsWithHttpInfo(aiId);
    }

    /**
     * Get AI&#39;s binding datasheet ids by AI ID
     * Get AI&#39;s binding datasheet ids by AI ID
     * @param aiId ai id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI&#39;s datasheets success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetAiDatasheetIdsWithHttpInfo(String aiId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAiDatasheetIdsValidateBeforeCall(aiId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get AI&#39;s binding datasheet ids by AI ID (asynchronously)
     * Get AI&#39;s binding datasheet ids by AI ID
     * @param aiId ai id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI&#39;s datasheets success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiDatasheetIdsAsync(String aiId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAiDatasheetIdsValidateBeforeCall(aiId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetAiNode
     * @param aiId ai id (required)
     * @param nodeId node id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI Node success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiNodeCall(String aiId, String nodeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/get_ai_node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_id", aiId));
        }

        if (nodeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("node_id", nodeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAiNodeValidateBeforeCall(String aiId, String nodeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aiId' is set
        if (aiId == null) {
            throw new ApiException("Missing the required parameter 'aiId' when calling daoGetAiNode(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling daoGetAiNode(Async)");
        }

        return daoGetAiNodeCall(aiId, nodeId, _callback);

    }

    /**
     * Get AI Node by AI ID
     * Get AI Node by AI ID
     * @param aiId ai id (required)
     * @param nodeId node id (required)
     * @return ApiResponseAiPO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI Node success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAiPO daoGetAiNode(String aiId, String nodeId) throws ApiException {
        ApiResponse<ApiResponseAiPO> localVarResp = daoGetAiNodeWithHttpInfo(aiId, nodeId);
        return localVarResp.getData();
    }

    /**
     * Get AI Node by AI ID
     * Get AI Node by AI ID
     * @param aiId ai id (required)
     * @param nodeId node id (required)
     * @return ApiResponse&lt;ApiResponseAiPO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI Node success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAiPO> daoGetAiNodeWithHttpInfo(String aiId, String nodeId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAiNodeValidateBeforeCall(aiId, nodeId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAiPO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get AI Node by AI ID (asynchronously)
     * Get AI Node by AI ID
     * @param aiId ai id (required)
     * @param nodeId node id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI Node success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiNodeAsync(String aiId, String nodeId, final ApiCallback<ApiResponseAiPO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAiNodeValidateBeforeCall(aiId, nodeId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAiPO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetAiPo
     * @param aiId ai id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiPoCall(String aiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/get_ai/{ai_id}"
            .replace("{" + "ai_id" + "}", localVarApiClient.escapeString(aiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetAiPoValidateBeforeCall(String aiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aiId' is set
        if (aiId == null) {
            throw new ApiException("Missing the required parameter 'aiId' when calling daoGetAiPo(Async)");
        }

        return daoGetAiPoCall(aiId, _callback);

    }

    /**
     * Get AI Entity by AI ID
     * Get AI Entity by AI ID
     * @param aiId ai id (required)
     * @return ApiResponseAiPO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseAiPO daoGetAiPo(String aiId) throws ApiException {
        ApiResponse<ApiResponseAiPO> localVarResp = daoGetAiPoWithHttpInfo(aiId);
        return localVarResp.getData();
    }

    /**
     * Get AI Entity by AI ID
     * Get AI Entity by AI ID
     * @param aiId ai id (required)
     * @return ApiResponse&lt;ApiResponseAiPO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseAiPO> daoGetAiPoWithHttpInfo(String aiId) throws ApiException {
        okhttp3.Call localVarCall = daoGetAiPoValidateBeforeCall(aiId, null);
        Type localVarReturnType = new TypeToken<ApiResponseAiPO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get AI Entity by AI ID (asynchronously)
     * Get AI Entity by AI ID
     * @param aiId ai id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get AI success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetAiPoAsync(String aiId, final ApiCallback<ApiResponseAiPO> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetAiPoValidateBeforeCall(aiId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseAiPO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for daoGetRevision
     * @param datasheetId datasheet_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Revision number success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRevisionCall(String datasheetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databus/dao/get_revision/{datasheet_id}"
            .replace("{" + "datasheet_id" + "}", localVarApiClient.escapeString(datasheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call daoGetRevisionValidateBeforeCall(String datasheetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasheetId' is set
        if (datasheetId == null) {
            throw new ApiException("Missing the required parameter 'datasheetId' when calling daoGetRevision(Async)");
        }

        return daoGetRevisionCall(datasheetId, _callback);

    }

    /**
     * Get Datasheet&#39;s Revision number
     * Get Datasheet&#39;s Revision number
     * @param datasheetId datasheet_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Revision number success </td><td>  -  </td></tr>
     </table>
     */
    public void daoGetRevision(String datasheetId) throws ApiException {
        daoGetRevisionWithHttpInfo(datasheetId);
    }

    /**
     * Get Datasheet&#39;s Revision number
     * Get Datasheet&#39;s Revision number
     * @param datasheetId datasheet_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Revision number success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> daoGetRevisionWithHttpInfo(String datasheetId) throws ApiException {
        okhttp3.Call localVarCall = daoGetRevisionValidateBeforeCall(datasheetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Datasheet&#39;s Revision number (asynchronously)
     * Get Datasheet&#39;s Revision number
     * @param datasheetId datasheet_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Revision number success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call daoGetRevisionAsync(String datasheetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = daoGetRevisionValidateBeforeCall(datasheetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
